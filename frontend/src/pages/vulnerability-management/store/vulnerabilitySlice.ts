import type { PayloadAction } from '@reduxjs/toolkit';
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { vulnerabilityService } from '@/services/vulnerabilityService';
import type { Vulnerability, FilterOptions } from '@/types';

interface VulnerabilityState {
  vulnerabilities: Vulnerability[];
  selectedVulnerability: Vulnerability | null;
  loading: boolean;
  error: string | null;
  pagination: {
    page: number;
    perPage: number;
    total: number;
    pages: number;
  };
  filters: FilterOptions;
}

const initialState: VulnerabilityState = {
  vulnerabilities: [],
  selectedVulnerability: null,
  loading: false,
  error: null,
  pagination: {
    page: 1,
    perPage: 20,
    total: 0,
    pages: 0,
  },
  filters: {},
};

export const fetchVulnerabilities = createAsyncThunk(
  'vulnerabilities/fetchVulnerabilities',
  async (filters?: FilterOptions) => {
    const response = await vulnerabilityService.getVulnerabilities(filters);
    if (response.success && response.data) {
      return { data: response.data, pagination: response.pagination };
    }
    throw new Error('Failed to fetch vulnerabilities');
  }
);

export const fetchVulnerabilityById = createAsyncThunk(
  'vulnerabilities/fetchVulnerabilityById',
  async (id: string) => {
    const response = await vulnerabilityService.getVulnerability(id);
    if (response.success && response.data) {
      return response.data;
    }
    throw new Error(response.error || 'Failed to fetch vulnerability');
  }
);

const vulnerabilitySlice = createSlice({
  name: 'vulnerabilities',
  initialState,
  reducers: {
    setFilters: (state, action: PayloadAction<FilterOptions>) => {
      state.filters = action.payload;
    },
    clearSelectedVulnerability: (state) => {
      state.selectedVulnerability = null;
    },
    clearError: (state) => {
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchVulnerabilities.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchVulnerabilities.fulfilled, (state, action) => {
        state.loading = false;
        state.vulnerabilities = action.payload.data;
        state.pagination = action.payload.pagination;
      })
      .addCase(fetchVulnerabilities.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to fetch vulnerabilities';
      })
      .addCase(fetchVulnerabilityById.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchVulnerabilityById.fulfilled, (state, action) => {
        state.loading = false;
        state.selectedVulnerability = action.payload;
      })
      .addCase(fetchVulnerabilityById.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to fetch vulnerability';
      });
  },
});

export const { setFilters, clearSelectedVulnerability, clearError } = vulnerabilitySlice.actions;
export default vulnerabilitySlice.reducer;
