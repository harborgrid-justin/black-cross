/**
 * @fileoverview Vulnerability Management main page. Primary landing page for the Vulnerability Management module.
 * 
 * @module pages/vulnerability-management/VulnerabilityManagementMain.tsx
 */

import { useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  Button,
  LinearProgress,
  CircularProgress,
  Alert,
} from '@mui/material';
import { Refresh as RefreshIcon } from '@mui/icons-material';
import { useAppDispatch, useAppSelector } from '@/store/hooks';
import { fetchVulnerabilities } from './store';
import { vulnerabilityService } from '@/services/vulnerabilityService';

export default function VulnerabilityManagementMain() {
  const dispatch = useAppDispatch();
  const { vulnerabilities, loading, error } = useAppSelector((state) => state.vulnerabilities);

  useEffect(() => {
    dispatch(fetchVulnerabilities(undefined));
  }, [dispatch]);

  const handleScanNow = async () => {
    try {
      await vulnerabilityService.runScan();
      // Refresh the list after scan
      dispatch(fetchVulnerabilities(undefined));
    } catch (err) {
      console.error('Error running scan:', err);
    }
  };

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4" sx={{ fontWeight: 700 }}>
          Vulnerability Management
        </Typography>
        <Button variant="outlined" startIcon={<RefreshIcon />} onClick={handleScanNow}>
          Scan Now
        </Button>
      </Box>

      {error && (
        <Alert severity="info" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      <Paper sx={{ p: 3, mb: 3 }}>
        <Typography variant="h6" gutterBottom>
          Risk Overview
        </Typography>
        <Box sx={{ mt: 2 }}>
          {[
            { label: 'Critical', value: 5, color: '#d32f2f' },
            { label: 'High', value: 12, color: '#f57c00' },
            { label: 'Medium', value: 28, color: '#fbc02d' },
            { label: 'Low', value: 45, color: '#388e3c' },
          ].map((item) => (
            <Box key={item.label} sx={{ mb: 2 }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>
                <Typography variant="body2">{item.label}</Typography>
                <Typography variant="body2">{item.value}</Typography>
              </Box>
              <LinearProgress
                variant="determinate"
                value={(item.value / 90) * 100}
                sx={{
                  height: 8,
                  borderRadius: 1,
                  backgroundColor: 'rgba(255, 255, 255, 0.1)',
                  '& .MuiLinearProgress-bar': { backgroundColor: item.color },
                }}
              />
            </Box>
          ))}
        </Box>
      </Paper>

      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell sx={{ fontWeight: 600 }}>CVE ID</TableCell>
              <TableCell sx={{ fontWeight: 600 }}>Title</TableCell>
              <TableCell sx={{ fontWeight: 600 }}>Severity</TableCell>
              <TableCell sx={{ fontWeight: 600 }}>CVSS Score</TableCell>
              <TableCell sx={{ fontWeight: 600 }}>Status</TableCell>
              <TableCell sx={{ fontWeight: 600 }}>Affected Assets</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {vulnerabilities.length === 0 ? (
              <TableRow>
                <TableCell colSpan={6} align="center">
                  <Typography color="text.secondary" sx={{ py: 4 }}>
                    No vulnerabilities found.
                  </Typography>
                </TableCell>
              </TableRow>
            ) : (
              vulnerabilities.map((vuln) => (
                <TableRow key={vuln.id} hover sx={{ cursor: 'pointer' }}>
                  <TableCell>{vuln.cveId}</TableCell>
                  <TableCell>{vuln.title}</TableCell>
                  <TableCell>
                    <Chip
                      label={vuln.severity}
                      color={
                        vuln.severity === 'critical'
                          ? 'error'
                          : vuln.severity === 'high'
                          ? 'warning'
                          : 'info'
                      }
                      size="small"
                    />
                  </TableCell>
                  <TableCell>{vuln.cvssScore}</TableCell>
                  <TableCell>
                    <Chip label={vuln.status} size="small" variant="outlined" />
                  </TableCell>
                  <TableCell>{vuln.affectedAssets.length}</TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </TableContainer>
    </Box>
  );
}
