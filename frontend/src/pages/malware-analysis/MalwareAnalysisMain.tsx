/**
 * @fileoverview Malware Analysis main page. Primary landing page for the Malware Analysis module.
 * 
 * @module pages/malware-analysis/MalwareAnalysisMain.tsx
 */

import { useEffect, useState, useCallback } from 'react';
import {
  Box,
  Paper,
  Typography,
  Button,
  Grid,
  Card,
  CardContent,
  Tabs,
  Tab,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  CircularProgress,
  Alert,
  LinearProgress,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  List,
  ListItem,
  ListItemText,
} from '@mui/material';
import {
  CloudUpload as UploadIcon,
  Refresh as RefreshIcon,
  Visibility as VisibilityIcon,
  Download as DownloadIcon,
  BugReport as BugReportIcon,
  ExpandMore as ExpandMoreIcon,
  Assessment as AssessmentIcon,
} from '@mui/icons-material';
import {
  malwareService,
  type MalwareSample,
  type AnalysisResult,
} from '@/services/malwareService';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;
  return (
    <div role="tabpanel" hidden={value !== index} {...other}>
      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}
    </div>
  );
}

export default function MalwareAnalysisMain() {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [samples, setSamples] = useState<MalwareSample[]>([]);
  const [selectedSample, setSelectedSample] = useState<MalwareSample | null>(null);
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);
  const [tabValue, setTabValue] = useState(0);
  const [uploadDialogOpen, setUploadDialogOpen] = useState(false);
  const [detailsDialogOpen, setDetailsDialogOpen] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [statistics, setStatistics] = useState({
    totalSamples: 0,
    analyzedSamples: 0,
    maliciousSamples: 0,
    pendingAnalysis: 0,
    topFamilies: [] as Array<{ name: string; count: number }>,
  });

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      setLoading(true);
      setError(null);

      // Fetch statistics
      const statsResponse = await malwareService.getStatistics();
      if (statsResponse.success && statsResponse.data) {
        setStatistics(statsResponse.data);
      }

      // Fetch samples
      const samplesResponse = await malwareService.getSamples({ perPage: 20 });
      if (samplesResponse.success && samplesResponse.data) {
        setSamples(samplesResponse.data);
      }
    } catch (err) {
      console.error('Error fetching data:', err);
      setError('Failed to load malware analysis data. Showing mock data.');

      // Mock data
      setStatistics({
        totalSamples: 245,
        analyzedSamples: 198,
        maliciousSamples: 156,
        pendingAnalysis: 12,
        topFamilies: [
          { name: 'Emotet', count: 34 },
          { name: 'Trickbot', count: 28 },
          { name: 'Ransomware', count: 22 },
        ],
      });

      const mockSamples: MalwareSample[] = [
        {
          id: '1',
          fileName: 'suspicious.exe',
          fileHash: 'a1b2c3d4e5f6789012345678901234567890abcd',
          fileSize: 524288,
          fileType: 'PE32',
          status: 'completed',
          risk: 'high',
          family: 'Emotet',
          tags: ['trojan', 'banking'],
          uploadedBy: 'analyst1',
          uploadedAt: new Date(Date.now() - 600000).toISOString(),
          analyzedAt: new Date(Date.now() - 300000).toISOString(),
        },
        {
          id: '2',
          fileName: 'document.pdf',
          fileHash: 'b2c3d4e5f678901234567890123456789abcdef0',
          fileSize: 102400,
          fileType: 'PDF',
          status: 'analyzing',
          risk: 'medium',
          tags: ['document'],
          uploadedBy: 'analyst2',
          uploadedAt: new Date(Date.now() - 1500000).toISOString(),
        },
        {
          id: '3',
          fileName: 'malware.bin',
          fileHash: 'c3d4e5f6789012345678901234567890abcdef01',
          fileSize: 1048576,
          fileType: 'ELF',
          status: 'pending',
          risk: 'critical',
          tags: ['linux'],
          uploadedBy: 'analyst1',
          uploadedAt: new Date(Date.now() - 3600000).toISOString(),
        },
      ];
      setSamples(mockSamples);
    } finally {
      setLoading(false);
    }
  };

  const handleFileUpload = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    try {
      setUploading(true);
      await malwareService.uploadSample(file);
      fetchData();
      setUploadDialogOpen(false);
    } catch (err) {
      console.error('Error uploading file:', err);
      setError('Failed to upload file');
    } finally {
      setUploading(false);
    }
  }, []);

  const handleViewDetails = async (sample: MalwareSample) => {
    setSelectedSample(sample);
    setDetailsDialogOpen(true);

    if (sample.status === 'completed') {
      try {
        const response = await malwareService.getAnalysisResult(sample.id);
        if (response.success && response.data) {
          setAnalysisResult(response.data);
        }
      } catch (err) {
        console.error('Error fetching analysis result:', err);
        // Mock analysis result
        setAnalysisResult({
          id: '1',
          sampleId: sample.id,
          detections: [
            { engine: 'ClamAV', result: 'Trojan.Generic', confidence: 85, timestamp: new Date().toISOString() },
            { engine: 'Yara', result: 'Emotet', confidence: 92, timestamp: new Date().toISOString() },
          ],
          iocs: [
            { type: 'ip', value: '192.168.1.100', context: 'Network connection' },
            { type: 'domain', value: 'malicious.com', context: 'DNS query' },
          ],
          score: 85,
          verdict: 'malicious',
          analyzedAt: new Date().toISOString(),
        });
      }
    }
  };

  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const getRiskColor = (risk: string) => {
    switch (risk) {
      case 'critical':
        return 'error';
      case 'high':
        return 'warning';
      case 'medium':
        return 'info';
      case 'low':
        return 'success';
      default:
        return 'default';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed':
        return 'success';
      case 'analyzing':
        return 'info';
      case 'pending':
        return 'warning';
      case 'failed':
        return 'error';
      default:
        return 'default';
    }
  };

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4" sx={{ fontWeight: 700 }}>
          Malware Analysis & Sandbox
        </Typography>
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Button variant="outlined" startIcon={<RefreshIcon />} onClick={fetchData}>
            Refresh
          </Button>
          <Button variant="contained" startIcon={<UploadIcon />} onClick={() => setUploadDialogOpen(true)}>
            Upload Sample
          </Button>
        </Box>
      </Box>

      {error && (
        <Alert severity="info" sx={{ mb: 3 }} onClose={() => setError(null)}>
          {error}
        </Alert>
      )}

      {/* Statistics */}
      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid size={{ xs: 12, sm: 6, md: 3 }} key="total">
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <BugReportIcon color="primary" sx={{ fontSize: 40 }} />
                <Box>
                  <Typography variant="body2" color="text.secondary">
                    Total Samples
                  </Typography>
                  <Typography variant="h4" sx={{ fontWeight: 700 }}>
                    {statistics.totalSamples}
                  </Typography>
                </Box>
              </Box>
            </CardContent>
          </Card>
        </Grid>
        <Grid size={{ xs: 12, sm: 6, md: 3 }} key="analyzed">
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <AssessmentIcon color="success" sx={{ fontSize: 40 }} />
                <Box>
                  <Typography variant="body2" color="text.secondary">
                    Analyzed
                  </Typography>
                  <Typography variant="h4" sx={{ fontWeight: 700 }}>
                    {statistics.analyzedSamples}
                  </Typography>
                </Box>
              </Box>
            </CardContent>
          </Card>
        </Grid>
        <Grid size={{ xs: 12, sm: 6, md: 3 }} key="malicious">
          <Card>
            <CardContent>
              <Typography variant="body2" color="text.secondary" gutterBottom>
                Malicious
              </Typography>
              <Typography variant="h4" color="error.main" sx={{ fontWeight: 700 }}>
                {statistics.maliciousSamples}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid size={{ xs: 12, sm: 6, md: 3 }} key="pending">
          <Card>
            <CardContent>
              <Typography variant="body2" color="text.secondary" gutterBottom>
                Pending
              </Typography>
              <Typography variant="h4" color="warning.main" sx={{ fontWeight: 700 }}>
                {statistics.pendingAnalysis}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      <Paper sx={{ p: 3 }}>
        <Tabs value={tabValue} onChange={handleTabChange} sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tab label="Samples" />
          <Tab label="Malware Families" />
          <Tab label="YARA Rules" />
        </Tabs>

        <TabPanel value={tabValue} index={0}>
          <TableContainer data-testid="malware-list">
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>File Name</TableCell>
                  <TableCell>Hash</TableCell>
                  <TableCell>Type</TableCell>
                  <TableCell>Risk</TableCell>
                  <TableCell>Status</TableCell>
                  <TableCell>Uploaded</TableCell>
                  <TableCell align="right">Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {samples.map((sample) => (
                  <TableRow key={sample.id} hover>
                    <TableCell>
                      <Typography variant="body2" fontWeight={600}>
                        {sample.fileName}
                      </Typography>
                      <Typography variant="caption" color="text.secondary">
                        {(sample.fileSize / 1024).toFixed(2)} KB
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Typography variant="caption" sx={{ fontFamily: 'monospace' }}>
                        {sample.fileHash.substring(0, 16)}...
                      </Typography>
                    </TableCell>
                    <TableCell>{sample.fileType}</TableCell>
                    <TableCell>
                      <Chip label={sample.risk} size="small" color={getRiskColor(sample.risk)} data-testid="threat-level" />
                    </TableCell>
                    <TableCell>
                      <Chip label={sample.status} size="small" color={getStatusColor(sample.status)} />
                    </TableCell>
                    <TableCell>
                      {new Date(sample.uploadedAt).toLocaleString()}
                    </TableCell>
                    <TableCell align="right">
                      <IconButton size="small" onClick={() => handleViewDetails(sample)}>
                        <VisibilityIcon />
                      </IconButton>
                      <IconButton size="small">
                        <DownloadIcon />
                      </IconButton>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </TabPanel>

        <TabPanel value={tabValue} index={1}>
          <Grid container spacing={2}>
            {statistics.topFamilies.map((family) => (
              <Grid size={{ xs: 12, sm: 6, md: 4 }} key={family.name}>
                <Card>
                  <CardContent>
                    <Typography variant="h6">{family.name}</Typography>
                    <Typography variant="h4" color="primary.main" sx={{ fontWeight: 700 }}>
                      {family.count}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      samples
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        </TabPanel>

        <TabPanel value={tabValue} index={2}>
          <Typography variant="body2" color="text.secondary" align="center" sx={{ py: 4 }}>
            YARA rules will be displayed here
          </Typography>
        </TabPanel>
      </Paper>

      {/* Upload Dialog */}
      <Dialog open={uploadDialogOpen} onClose={() => setUploadDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Upload Sample for Analysis</DialogTitle>
        <DialogContent>
          <Paper
            sx={{
              p: 4,
              textAlign: 'center',
              border: '2px dashed',
              borderColor: 'divider',
              cursor: 'pointer',
              '&:hover': { bgcolor: 'action.hover' },
            }}
            onClick={() => document.getElementById('file-upload')?.click()}
          >
            <input
              id="file-upload"
              type="file"
              hidden
              onChange={handleFileUpload}
              disabled={uploading}
            />
            <UploadIcon sx={{ fontSize: 60, mb: 2, color: 'primary.main' }} />
            <Typography variant="h6" gutterBottom>
              {uploading ? 'Uploading...' : 'Upload File for Analysis'}
            </Typography>
            <Typography variant="body2" color="text.secondary" paragraph>
              Drag and drop or click to browse
            </Typography>
            {uploading && <LinearProgress />}
          </Paper>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setUploadDialogOpen(false)} disabled={uploading}>
            Cancel
          </Button>
        </DialogActions>
      </Dialog>

      {/* Details Dialog */}
      <Dialog open={detailsDialogOpen} onClose={() => setDetailsDialogOpen(false)} maxWidth="md" fullWidth>
        <DialogTitle>Analysis Details</DialogTitle>
        <DialogContent>
          {selectedSample && (
            <Box>
              <Typography variant="h6" gutterBottom>
                {selectedSample.fileName}
              </Typography>
              <Grid container spacing={2} sx={{ mb: 3 }}>
                <Grid size={{ xs: 6 }}>
                  <Typography variant="body2" color="text.secondary">
                    Hash
                  </Typography>
                  <Typography variant="body2" sx={{ fontFamily: 'monospace', wordBreak: 'break-all' }}>
                    {selectedSample.fileHash}
                  </Typography>
                </Grid>
                <Grid size={{ xs: 6 }}>
                  <Typography variant="body2" color="text.secondary">
                    Status
                  </Typography>
                  <Chip label={selectedSample.status} size="small" color={getStatusColor(selectedSample.status)} />
                </Grid>
              </Grid>

              {analysisResult && (
                <Box data-testid="analysis-results">
                  <Accordion defaultExpanded>
                    <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                      <Typography>Detections ({analysisResult.detections.length})</Typography>
                    </AccordionSummary>
                    <AccordionDetails>
                      <List>
                        {analysisResult.detections.map((detection, idx) => (
                          <ListItem key={idx}>
                            <ListItemText
                              primary={`${detection.engine}: ${detection.result}`}
                              secondary={`Confidence: ${detection.confidence}%`}
                            />
                          </ListItem>
                        ))}
                      </List>
                    </AccordionDetails>
                  </Accordion>

                  <Accordion>
                    <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                      <Typography>IOCs ({analysisResult.iocs.length})</Typography>
                    </AccordionSummary>
                    <AccordionDetails>
                      <List>
                        {analysisResult.iocs.map((ioc, idx) => (
                          <ListItem key={idx}>
                            <ListItemText
                              primary={`${ioc.type}: ${ioc.value}`}
                              secondary={ioc.context}
                            />
                          </ListItem>
                        ))}
                      </List>
                    </AccordionDetails>
                  </Accordion>
                </Box>
              )}
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDetailsDialogOpen(false)}>Close</Button>
          <Button variant="contained" startIcon={<DownloadIcon />}>
            Download Report
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}
