/**
 * @fileoverview Redux slice for Malware Analysis state management.
 *
 * This module manages the state for malware sample analysis including
 * sample uploads, analysis status tracking, and result retrieval. Provides
 * async thunks for fetching samples and submitting them for analysis.
 *
 * @module pages/malware-analysis/store/malwareSlice
 */

import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { malwareService } from '@/services/malwareService';

/**
 * Represents a malware sample with analysis metadata.
 *
 * @interface MalwareSample
 * @property {string} id - Unique identifier for the sample
 * @property {string} fileName - Original filename of the uploaded sample
 * @property {string} fileHash - Hash of the file (typically SHA256)
 * @property {number} fileSize - Size of the file in bytes
 * @property {string} fileType - File type/format (PE32, ELF, PDF, etc.)
 * @property {('pending'|'analyzing'|'completed'|'failed')} status - Current analysis status
 * @property {('critical'|'high'|'medium'|'low'|'benign')} risk - Risk level assessment
 * @property {string} [family] - Identified malware family name if detected
 * @property {string[]} tags - Categorization tags (trojan, ransomware, etc.)
 * @property {string} uploadedBy - Username of the analyst who uploaded the sample
 * @property {string} uploadedAt - ISO timestamp of upload
 * @property {string} [analyzedAt] - ISO timestamp when analysis completed
 */
interface MalwareSample {
  id: string;
  fileName: string;
  fileHash: string;
  fileSize: number;
  fileType: string;
  status: 'pending' | 'analyzing' | 'completed' | 'failed';
  risk: 'critical' | 'high' | 'medium' | 'low' | 'benign';
  family?: string;
  tags: string[];
  uploadedBy: string;
  uploadedAt: string;
  analyzedAt?: string;
}

/**
 * State shape for the Malware Analysis slice.
 *
 * @interface MalwareState
 * @property {MalwareSample[]} samples - Array of malware samples
 * @property {MalwareSample | null} selectedSample - Currently selected sample for detail view
 * @property {boolean} loading - Indicates if an async operation is in progress
 * @property {string | null} error - Error message from failed operations
 */
interface MalwareState {
  samples: MalwareSample[];
  selectedSample: MalwareSample | null;
  loading: boolean;
  error: string | null;
}

/**
 * Initial state for the Malware Analysis slice.
 *
 * @constant
 */
const initialState: MalwareState = {
  samples: [],
  selectedSample: null,
  loading: false,
  error: null,
};

/**
 * Async thunk to fetch all malware samples.
 *
 * Retrieves the list of uploaded malware samples from the backend API.
 * Returns samples with their current analysis status and metadata.
 *
 * @async
 * @function fetchMalwareSamples
 * @returns {Promise<MalwareSample[]>} Array of malware samples
 * @throws {Error} When the API request fails or returns unsuccessful response
 *
 * @example
 * ```typescript
 * dispatch(fetchMalwareSamples());
 * ```
 */
export const fetchMalwareSamples = createAsyncThunk(
  'malware/fetchSamples',
  async () => {
    const response = await malwareService.getSamples();
    if (response.success && response.data) {
      return response.data;
    }
    throw new Error('Failed to fetch malware samples');
  }
);

/**
 * Async thunk to submit a malware sample for analysis.
 *
 * Submits an uploaded sample to the analysis engine (sandbox, YARA, AV engines).
 * The analysis runs asynchronously and updates the sample's status.
 *
 * @async
 * @function analyzeMalware
 * @param {string} sampleId - Unique identifier of the sample to analyze
 * @returns {Promise<any>} Analysis submission confirmation
 * @throws {Error} When the submission fails or sample is not found
 *
 * @example
 * ```typescript
 * dispatch(analyzeMalware('sample-123'));
 * ```
 */
export const analyzeMalware = createAsyncThunk(
  'malware/analyze',
  async (sampleId: string) => {
    const response = await malwareService.submitForAnalysis(sampleId);
    if (response.success && response.data) {
      return response.data;
    }
    throw new Error('Failed to analyze malware');
  }
);

/**
 * Redux slice for Malware Analysis state.
 *
 * Manages state for malware samples, analysis operations, and error handling.
 * Includes synchronous reducers for local state updates and extra reducers
 * for handling async thunk lifecycle events.
 */
const malwareSlice = createSlice({
  name: 'malware',
  initialState,
  reducers: {
    /**
     * Clears the currently selected malware sample from state.
     *
     * Used when navigating away from the detail view to clean up state.
     *
     * @param {MalwareState} state - Current state
     */
    clearSelectedSample: (state) => {
      state.selectedSample = null;
    },
    /**
     * Clears any error message from state.
     *
     * Useful for dismissing error alerts after user acknowledgment.
     *
     * @param {MalwareState} state - Current state
     */
    clearError: (state) => {
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      // fetchMalwareSamples lifecycle
      .addCase(fetchMalwareSamples.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchMalwareSamples.fulfilled, (state, action) => {
        state.loading = false;
        state.samples = action.payload;
      })
      .addCase(fetchMalwareSamples.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to fetch malware samples';
      })
      // analyzeMalware lifecycle
      .addCase(analyzeMalware.pending, (state) => {
        state.loading = true;
      })
      .addCase(analyzeMalware.fulfilled, (state) => {
        state.loading = false;
      })
      .addCase(analyzeMalware.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to analyze malware';
      });
  },
});

export const { clearSelectedSample, clearError } = malwareSlice.actions;
export default malwareSlice.reducer;
