/**
 * @fileoverview Redux slice for managing vulnerability assessment state.
 *
 * Handles state management for security vulnerabilities including CVEs, scan results,
 * risk scoring, and remediation tracking. Supports filtering and pagination.
 *
 * @module store/slices/vulnerabilitySlice
 */

import type { PayloadAction } from '@reduxjs/toolkit';
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { vulnerabilityService } from '@/services/vulnerabilityService';
import type { Vulnerability, FilterOptions } from '@/types';

/**
 * State shape for vulnerability management.
 *
 * @interface VulnerabilityState
 * @property {Vulnerability[]} vulnerabilities - Array of all vulnerabilities
 * @property {Vulnerability | null} selectedVulnerability - Currently selected vulnerability for detail view
 * @property {boolean} loading - Whether an async operation is in progress
 * @property {string | null} error - Error message from failed operations
 * @property {Object} pagination - Pagination metadata
 * @property {FilterOptions} filters - Current filter/search criteria
 */
interface VulnerabilityState {
  vulnerabilities: Vulnerability[];
  selectedVulnerability: Vulnerability | null;
  loading: boolean;
  error: string | null;
  pagination: {
    page: number;
    perPage: number;
    total: number;
    pages: number;
  };
  filters: FilterOptions;
}

const initialState: VulnerabilityState = {
  vulnerabilities: [],
  selectedVulnerability: null,
  loading: false,
  error: null,
  pagination: {
    page: 1,
    perPage: 20,
    total: 0,
    pages: 0,
  },
  filters: {},
};

/**
 * Async thunk for fetching vulnerabilities with optional filtering and pagination.
 *
 * Retrieves vulnerability data from scans and external sources. Supports filtering
 * by CVSS score, severity, affected assets, remediation status, and date range.
 *
 * @async
 * @param {FilterOptions} [filters] - Optional filter and pagination criteria
 * @returns {Promise<{data: Vulnerability[], pagination: Object}>} Vulnerabilities and pagination metadata
 * @throws {Error} When the fetch operation fails
 *
 * @example
 * ```typescript
 * import { useEffect } from 'react';
 * import { useAppDispatch } from '@/store/hooks';
 * import { fetchVulnerabilities } from '@/store/slices/vulnerabilitySlice';
 *
 * function VulnerabilityList() {
 *   const dispatch = useAppDispatch();
 *
 *   useEffect(() => {
 *     dispatch(fetchVulnerabilities({
 *       severity: 'critical',
 *       status: 'unpatched'
 *     }));
 *   }, [dispatch]);
 * }
 * ```
 */
export const fetchVulnerabilities = createAsyncThunk(
  'vulnerabilities/fetchVulnerabilities',
  async (filters?: FilterOptions) => {
    const response = await vulnerabilityService.getVulnerabilities(filters);
    if (response.success && response.data) {
      return { data: response.data, pagination: response.pagination };
    }
    throw new Error('Failed to fetch vulnerabilities');
  }
);

/**
 * Async thunk for fetching a single vulnerability by ID.
 *
 * Retrieves detailed vulnerability information including CVE details, CVSS scores,
 * affected systems, exploitability assessment, and remediation steps.
 *
 * @async
 * @param {string} id - Unique identifier of the vulnerability
 * @returns {Promise<Vulnerability>} Detailed vulnerability data
 * @throws {Error} When the vulnerability cannot be found or fetch fails
 *
 * @example
 * ```typescript
 * import { useEffect } from 'react';
 * import { useAppDispatch } from '@/store/hooks';
 * import { fetchVulnerabilityById } from '@/store/slices/vulnerabilitySlice';
 *
 * function VulnerabilityDetail({ vulnId }: { vulnId: string }) {
 *   const dispatch = useAppDispatch();
 *
 *   useEffect(() => {
 *     dispatch(fetchVulnerabilityById(vulnId));
 *   }, [dispatch, vulnId]);
 * }
 * ```
 */
export const fetchVulnerabilityById = createAsyncThunk(
  'vulnerabilities/fetchVulnerabilityById',
  async (id: string) => {
    const response = await vulnerabilityService.getVulnerability(id);
    if (response.success && response.data) {
      return response.data;
    }
    throw new Error(response.error || 'Failed to fetch vulnerability');
  }
);

/**
 * Vulnerability slice containing reducers and actions for vulnerability state management.
 *
 * Manages vulnerability assessment data including scan results, CVE tracking,
 * and remediation status. Supports filtering and pagination.
 */
const vulnerabilitySlice = createSlice({
  name: 'vulnerabilities',
  initialState,
  reducers: {
    /**
     * Updates the filter criteria for vulnerability list.
     *
     * Sets new filter options for subsequent fetch operations. Common filters
     * include severity, CVSS score, affected assets, and remediation status.
     *
     * @param {VulnerabilityState} state - Current vulnerability state
     * @param {PayloadAction<FilterOptions>} action - Action containing new filter options
     *
     * @example
     * ```typescript
     * import { useAppDispatch } from '@/store/hooks';
     * import { setFilters } from '@/store/slices/vulnerabilitySlice';
     *
     * function VulnerabilityFilters() {
     *   const dispatch = useAppDispatch();
     *
     *   dispatch(setFilters({
     *     severity: 'critical',
     *     cvssScore: '>=7.0'
     *   }));
     * }
     * ```
     */
    setFilters: (state, action: PayloadAction<FilterOptions>) => {
      state.filters = action.payload;
    },
    /**
     * Clears the currently selected vulnerability.
     *
     * @param {VulnerabilityState} state - Current vulnerability state
     */
    clearSelectedVulnerability: (state) => {
      state.selectedVulnerability = null;
    },
    /**
     * Clears any error messages from the state.
     *
     * @param {VulnerabilityState} state - Current vulnerability state
     */
    clearError: (state) => {
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      // Fetch vulnerabilities lifecycle
      .addCase(fetchVulnerabilities.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchVulnerabilities.fulfilled, (state, action) => {
        state.loading = false;
        state.vulnerabilities = action.payload.data;
        state.pagination = action.payload.pagination;
      })
      .addCase(fetchVulnerabilities.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to fetch vulnerabilities';
      })
      // Fetch vulnerability by ID lifecycle
      .addCase(fetchVulnerabilityById.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchVulnerabilityById.fulfilled, (state, action) => {
        state.loading = false;
        state.selectedVulnerability = action.payload;
      })
      .addCase(fetchVulnerabilityById.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to fetch vulnerability';
      });
  },
});

export const { setFilters, clearSelectedVulnerability, clearError } = vulnerabilitySlice.actions;
export default vulnerabilitySlice.reducer;
