import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { malwareService } from '@/services/malwareService';

interface MalwareSample {
  id: string;
  fileName: string;
  fileHash: string;
  fileSize: number;
  fileType: string;
  status: 'pending' | 'analyzing' | 'completed' | 'failed';
  risk: 'critical' | 'high' | 'medium' | 'low' | 'benign';
  family?: string;
  tags: string[];
  uploadedBy: string;
  uploadedAt: string;
  analyzedAt?: string;
}

interface MalwareState {
  samples: MalwareSample[];
  selectedSample: MalwareSample | null;
  loading: boolean;
  error: string | null;
}

const initialState: MalwareState = {
  samples: [],
  selectedSample: null,
  loading: false,
  error: null,
};

export const fetchMalwareSamples = createAsyncThunk(
  'malware/fetchSamples',
  async () => {
    const response = await malwareService.getSamples();
    if (response.success && response.data) {
      return response.data;
    }
    throw new Error('Failed to fetch malware samples');
  }
);

export const analyzeMalware = createAsyncThunk(
  'malware/analyze',
  async (sampleId: string) => {
    const response = await malwareService.submitForAnalysis(sampleId);
    if (response.success && response.data) {
      return response.data;
    }
    throw new Error('Failed to analyze malware');
  }
);

const malwareSlice = createSlice({
  name: 'malware',
  initialState,
  reducers: {
    clearSelectedSample: (state) => {
      state.selectedSample = null;
    },
    clearError: (state) => {
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchMalwareSamples.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchMalwareSamples.fulfilled, (state, action) => {
        state.loading = false;
        state.samples = action.payload;
      })
      .addCase(fetchMalwareSamples.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to fetch malware samples';
      })
      .addCase(analyzeMalware.pending, (state) => {
        state.loading = true;
      })
      .addCase(analyzeMalware.fulfilled, (state) => {
        state.loading = false;
      })
      .addCase(analyzeMalware.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to analyze malware';
      });
  },
});

export const { clearSelectedSample, clearError } = malwareSlice.actions;
export default malwareSlice.reducer;
