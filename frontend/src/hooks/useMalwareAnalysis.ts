/**
 * @fileoverview Custom React hook for MalwareAnalysis feature. Provides state management and operations for MalwareAnalysis.
 * 
 * @module hooks/useMalwareAnalysis
 */

import { useState, useCallback } from 'react';
import { malwareService } from '@/services/malwareService';
import type { ApiResponse, PaginatedResponse, FilterOptions } from '@/types';

/**
 * Custom hook for malware analysis queries
 */
export function useMalwareQuery() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const getSamples = useCallback(async (filters?: FilterOptions): Promise<PaginatedResponse<unknown> | null> => {
    try {
      setLoading(true);
      setError(null);
      const response = await malwareService.getSamples(filters);
      return response;
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to fetch samples';
      setError(message);
      return null;
    } finally {
      setLoading(false);
    }
  }, []);

  const getSample = useCallback(async (id: string): Promise<ApiResponse<unknown> | null> => {
    try {
      setLoading(true);
      setError(null);
      const response = await malwareService.getSample(id);
      return response;
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to fetch sample';
      setError(message);
      return null;
    } finally {
      setLoading(false);
    }
  }, []);

  const getAnalysisResult = useCallback(async (id: string): Promise<ApiResponse<unknown> | null> => {
    try {
      setLoading(true);
      setError(null);
      const response = await malwareService.getAnalysisResult(id);
      return response;
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to fetch analysis result';
      setError(message);
      return null;
    } finally {
      setLoading(false);
    }
  }, []);

  const getStaticAnalysis = useCallback(async (id: string): Promise<ApiResponse<unknown> | null> => {
    try {
      setLoading(true);
      setError(null);
      const response = await malwareService.getStaticAnalysis(id);
      return response;
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to fetch static analysis';
      setError(message);
      return null;
    } finally {
      setLoading(false);
    }
  }, []);

  const getDynamicAnalysis = useCallback(async (id: string): Promise<ApiResponse<unknown> | null> => {
    try {
      setLoading(true);
      setError(null);
      const response = await malwareService.getDynamicAnalysis(id);
      return response;
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to fetch dynamic analysis';
      setError(message);
      return null;
    } finally {
      setLoading(false);
    }
  }, []);

  const getBehavioralAnalysis = useCallback(async (id: string): Promise<ApiResponse<unknown> | null> => {
    try {
      setLoading(true);
      setError(null);
      const response = await malwareService.getBehavioralAnalysis(id);
      return response;
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to fetch behavioral analysis';
      setError(message);
      return null;
    } finally {
      setLoading(false);
    }
  }, []);

  const getYaraRules = useCallback(async (): Promise<ApiResponse<unknown> | null> => {
    try {
      setLoading(true);
      setError(null);
      const response = await malwareService.getYaraRules();
      return response;
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to fetch YARA rules';
      setError(message);
      return null;
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    getSamples,
    getSample,
    getAnalysisResult,
    getStaticAnalysis,
    getDynamicAnalysis,
    getBehavioralAnalysis,
    getYaraRules,
    loading,
    error,
  };
}

/**
 * Custom hook for malware analysis mutations
 */
export function useMalwareMutation() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const uploadSample = useCallback(async (file: File, tags?: string[]): Promise<ApiResponse<unknown> | null> => {
    try {
      setLoading(true);
      setError(null);
      const response = await malwareService.uploadSample(file, tags);
      return response as any;
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to upload sample';
      setError(message);
      return null;
    } finally {
      setLoading(false);
    }
  }, []);

  const deleteSample = useCallback(async (id: string): Promise<boolean> => {
    try {
      setLoading(true);
      setError(null);
      await malwareService.deleteSample(id);
      return true;
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to delete sample';
      setError(message);
      return false;
    } finally {
      setLoading(false);
    }
  }, []);

  const submitForAnalysis = useCallback(async (id: string, sandboxId?: string): Promise<ApiResponse<unknown> | null> => {
    try {
      setLoading(true);
      setError(null);
      const response = await malwareService.submitForAnalysis(id, sandboxId);
      return response as any;
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to submit for analysis';
      setError(message);
      return null;
    } finally {
      setLoading(false);
    }
  }, []);

  const generateYaraRule = useCallback(async (id: string): Promise<ApiResponse<unknown> | null> => {
    try {
      setLoading(true);
      setError(null);
      const response = await malwareService.generateYaraRule(id);
      return response;
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to generate YARA rule';
      setError(message);
      return null;
    } finally {
      setLoading(false);
    }
  }, []);

  const testYaraRule = useCallback(async (ruleContent: string, sampleId?: string): Promise<ApiResponse<unknown> | null> => {
    try {
      setLoading(true);
      setError(null);
      const response = await malwareService.testYaraRule(ruleContent, sampleId);
      return response;
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to test YARA rule';
      setError(message);
      return null;
    } finally {
      setLoading(false);
    }
  }, []);

  const extractIoCs = useCallback(async (id: string): Promise<ApiResponse<unknown> | null> => {
    try {
      setLoading(true);
      setError(null);
      const response = await malwareService.extractIoCs(id);
      return response;
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to extract IoCs';
      setError(message);
      return null;
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    uploadSample,
    deleteSample,
    submitForAnalysis,
    generateYaraRule,
    testYaraRule,
    extractIoCs,
    loading,
    error,
  };
}

/**
 * Custom hook for composite malware analysis operations
 */
export function useMalwareComposite() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const uploadAndAnalyze = useCallback(async (
    file: File,
    tags?: string[],
    sandboxId?: string
  ): Promise<{ sample: ApiResponse<unknown> | null; analysis: ApiResponse<unknown> | null }> => {
    try {
      setLoading(true);
      setError(null);
      
      const uploadResponse = await malwareService.uploadSample(file, tags);
      if (!uploadResponse.data?.id) {
        throw new Error('Failed to upload sample');
      }
      
      const analysisResponse = await malwareService.submitForAnalysis(uploadResponse.data.id, sandboxId);
      
      return { sample: uploadResponse as any, analysis: analysisResponse as any };
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to upload and analyze sample';
      setError(message);
      return { sample: null, analysis: null };
    } finally {
      setLoading(false);
    }
  }, []);

  const getCompleteAnalysis = useCallback(async (id: string): Promise<{
    sample: ApiResponse<unknown> | null;
    result: ApiResponse<unknown> | null;
    staticAnalysis: ApiResponse<unknown> | null;
    dynamicAnalysis: ApiResponse<unknown> | null;
    behavioralAnalysis: ApiResponse<unknown> | null;
  }> => {
    try {
      setLoading(true);
      setError(null);
      
      const [sample, result, staticAnalysis, dynamicAnalysis, behavioralAnalysis] = await Promise.all([
        malwareService.getSample(id),
        malwareService.getAnalysisResult(id),
        malwareService.getStaticAnalysis(id),
        malwareService.getDynamicAnalysis(id),
        malwareService.getBehavioralAnalysis(id),
      ]);
      
      return { sample, result, staticAnalysis, dynamicAnalysis, behavioralAnalysis };
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to get complete analysis';
      setError(message);
      return {
        sample: null,
        result: null,
        staticAnalysis: null,
        dynamicAnalysis: null,
        behavioralAnalysis: null,
      };
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    uploadAndAnalyze,
    getCompleteAnalysis,
    loading,
    error,
  };
}

/**
 * Main hook that combines all malware analysis operations
 */
export function useMalwareAnalysis() {
  const queries = useMalwareQuery();
  const mutations = useMalwareMutation();
  const composites = useMalwareComposite();

  return {
    queries,
    mutations,
    composites,
  };
}
