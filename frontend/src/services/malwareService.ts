import { apiClient } from './api';
import type { ApiResponse, PaginatedResponse, FilterOptions } from '@/types';

export interface MalwareSample {
  id: string;
  fileName: string;
  fileHash: string;
  fileSize: number;
  fileType: string;
  status: 'pending' | 'analyzing' | 'completed' | 'failed';
  risk: 'critical' | 'high' | 'medium' | 'low' | 'benign';
  family?: string;
  tags: string[];
  uploadedBy: string;
  uploadedAt: string;
  analyzedAt?: string;
}

export interface AnalysisResult {
  id: string;
  sampleId: string;
  staticAnalysis?: StaticAnalysis;
  dynamicAnalysis?: DynamicAnalysis;
  behavioralAnalysis?: BehavioralAnalysis;
  detections: Detection[];
  iocs: ExtractedIoC[];
  yaraRules?: YaraRule[];
  score: number;
  verdict: 'malicious' | 'suspicious' | 'benign';
  analyzedAt: string;
}

export interface StaticAnalysis {
  fileType: string;
  entropy: number;
  packers: string[];
  sections: FileSection[];
  imports: string[];
  exports: string[];
  strings: string[];
  signatures: string[];
}

export interface FileSection {
  name: string;
  size: number;
  entropy: number;
  virtualAddress: string;
}

export interface DynamicAnalysis {
  processes: ProcessInfo[];
  networkActivity: NetworkActivity[];
  fileActivity: FileActivity[];
  registryActivity: RegistryActivity[];
  screenshots: string[];
  pcap?: string;
}

export interface ProcessInfo {
  pid: number;
  name: string;
  commandLine: string;
  parentPid?: number;
  children: number[];
  startTime: string;
  endTime?: string;
}

export interface NetworkActivity {
  timestamp: string;
  protocol: string;
  sourceIp: string;
  sourcePort: number;
  destIp: string;
  destPort: number;
  domain?: string;
  data?: string;
}

export interface FileActivity {
  timestamp: string;
  action: 'create' | 'modify' | 'delete' | 'read' | 'write';
  path: string;
  hash?: string;
}

export interface RegistryActivity {
  timestamp: string;
  action: 'create' | 'modify' | 'delete' | 'read';
  key: string;
  value?: string;
  data?: string;
}

export interface BehavioralAnalysis {
  capabilities: string[];
  tactics: string[];
  techniques: string[];
  procedures: string[];
  suspicious: SuspiciousBehavior[];
}

export interface SuspiciousBehavior {
  type: string;
  description: string;
  severity: 'high' | 'medium' | 'low';
  indicators: string[];
}

export interface Detection {
  engine: string;
  result: string;
  confidence: number;
  timestamp: string;
}

export interface ExtractedIoC {
  type: 'ip' | 'domain' | 'url' | 'hash' | 'email' | 'file' | 'registry' | 'mutex';
  value: string;
  context: string;
}

export interface YaraRule {
  name: string;
  description: string;
  rule: string;
  tags: string[];
  generatedAt: string;
}

export interface Sandbox {
  id: string;
  name: string;
  type: 'windows' | 'linux' | 'android';
  version: string;
  status: 'ready' | 'busy' | 'maintenance' | 'offline';
  currentJob?: string;
  capabilities: string[];
}

export const malwareService = {
  // Samples
  async getSamples(filters?: FilterOptions): Promise<PaginatedResponse<MalwareSample>> {
    const params = new URLSearchParams();
    if (filters) {
      Object.entries(filters).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          params.append(key, String(value));
        }
      });
    }
    return apiClient.get<PaginatedResponse<MalwareSample>>(
      `/malware-analysis/samples?${params.toString()}`
    );
  },

  async getSample(id: string): Promise<ApiResponse<MalwareSample>> {
    return apiClient.get<ApiResponse<MalwareSample>>(`/malware-analysis/samples/${id}`);
  },

  async uploadSample(file: File, tags?: string[]): Promise<ApiResponse<MalwareSample>> {
    const formData = new FormData();
    formData.append('file', file);
    if (tags && tags.length > 0) {
      formData.append('tags', JSON.stringify(tags));
    }
    return apiClient.post<ApiResponse<MalwareSample>>('/malware-analysis/samples', formData);
  },

  async deleteSample(id: string): Promise<ApiResponse<void>> {
    return apiClient.delete<ApiResponse<void>>(`/malware-analysis/samples/${id}`);
  },

  // Analysis
  async submitForAnalysis(sampleId: string, sandboxId?: string): Promise<ApiResponse<{ jobId: string }>> {
    return apiClient.post<ApiResponse<{ jobId: string }>>(
      `/malware-analysis/samples/${sampleId}/analyze`,
      { sandboxId }
    );
  },

  async getAnalysisResult(sampleId: string): Promise<ApiResponse<AnalysisResult>> {
    return apiClient.get<ApiResponse<AnalysisResult>>(
      `/malware-analysis/samples/${sampleId}/analysis`
    );
  },

  async getStaticAnalysis(sampleId: string): Promise<ApiResponse<StaticAnalysis>> {
    return apiClient.get<ApiResponse<StaticAnalysis>>(
      `/malware-analysis/samples/${sampleId}/static-analysis`
    );
  },

  async getDynamicAnalysis(sampleId: string): Promise<ApiResponse<DynamicAnalysis>> {
    return apiClient.get<ApiResponse<DynamicAnalysis>>(
      `/malware-analysis/samples/${sampleId}/dynamic-analysis`
    );
  },

  async getBehavioralAnalysis(sampleId: string): Promise<ApiResponse<BehavioralAnalysis>> {
    return apiClient.get<ApiResponse<BehavioralAnalysis>>(
      `/malware-analysis/samples/${sampleId}/behavioral-analysis`
    );
  },

  // YARA Rules
  async generateYaraRule(sampleId: string): Promise<ApiResponse<YaraRule>> {
    return apiClient.post<ApiResponse<YaraRule>>(
      `/malware-analysis/samples/${sampleId}/yara-rule`
    );
  },

  async getYaraRules(sampleId?: string): Promise<ApiResponse<YaraRule[]>> {
    const url = sampleId
      ? `/malware-analysis/samples/${sampleId}/yara-rules`
      : '/malware-analysis/yara-rules';
    return apiClient.get<ApiResponse<YaraRule[]>>(url);
  },

  async testYaraRule(rule: string, sampleId: string): Promise<ApiResponse<{ matches: boolean }>> {
    return apiClient.post<ApiResponse<{ matches: boolean }>>(
      `/malware-analysis/yara-rules/test`,
      { rule, sampleId }
    );
  },

  // IoC Extraction
  async extractIoCs(sampleId: string): Promise<ApiResponse<ExtractedIoC[]>> {
    return apiClient.post<ApiResponse<ExtractedIoC[]>>(
      `/malware-analysis/samples/${sampleId}/extract-iocs`
    );
  },

  // Sandbox Management
  async getSandboxes(): Promise<ApiResponse<Sandbox[]>> {
    return apiClient.get<ApiResponse<Sandbox[]>>('/malware-analysis/sandboxes');
  },

  async getSandboxStatus(sandboxId: string): Promise<ApiResponse<Sandbox>> {
    return apiClient.get<ApiResponse<Sandbox>>(`/malware-analysis/sandboxes/${sandboxId}`);
  },

  // Family Classification
  async classifyFamily(sampleId: string): Promise<ApiResponse<{ family: string; confidence: number }>> {
    return apiClient.post<ApiResponse<{ family: string; confidence: number }>>(
      `/malware-analysis/samples/${sampleId}/classify`
    );
  },

  async getFamilies(): Promise<ApiResponse<Array<{ name: string; count: number }>>> {
    return apiClient.get<ApiResponse<Array<{ name: string; count: number }>>>(
      '/malware-analysis/families'
    );
  },

  // Statistics
  async getStatistics(): Promise<ApiResponse<{
    totalSamples: number;
    analyzedSamples: number;
    maliciousSamples: number;
    pendingAnalysis: number;
    topFamilies: Array<{ name: string; count: number }>;
  }>> {
    return apiClient.get<ApiResponse<{
      totalSamples: number;
      analyzedSamples: number;
      maliciousSamples: number;
      pendingAnalysis: number;
      topFamilies: Array<{ name: string; count: number }>;
    }>>('/malware-analysis/statistics');
  },

  // Download
  async downloadSample(id: string): Promise<Blob> {
    return apiClient.get<Blob>(`/malware-analysis/samples/${id}/download`);
  },

  async downloadReport(id: string, format: 'pdf' | 'json' | 'html'): Promise<Blob> {
    return apiClient.get<Blob>(
      `/malware-analysis/samples/${id}/report?format=${format}`
    );
  },
};
