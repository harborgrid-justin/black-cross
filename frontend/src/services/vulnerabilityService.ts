/**
 * @fileoverview Vulnerability Management API service.
 * 
 * Provides methods for vulnerability scanning, tracking, and patch management.
 * 
 * @module services/vulnerabilityService
 */

import { apiClient } from './api';
import type { Vulnerability, ApiResponse, PaginatedResponse, FilterOptions } from '@/types';

/**
 * Service for handling vulnerability API operations.
 * 
 * Provides methods for CRUD operations and specialized functionality.
 * All methods return promises and handle errors appropriately.
 * 
 * @namespace vulnerabilityService
 */
export const vulnerabilityService = {
  // Get all vulnerabilities with optional filters
  async getVulnerabilities(filters?: FilterOptions): Promise<PaginatedResponse<Vulnerability>> {
    const params = new URLSearchParams();
    if (filters) {
      Object.entries(filters).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          params.append(key, String(value));
        }
      });
    }
    return apiClient.get<PaginatedResponse<Vulnerability>>(
      `/vulnerability-management?${params.toString()}`
    );
  },

  // Get single vulnerability by ID
  async getVulnerability(id: string): Promise<ApiResponse<Vulnerability>> {
    return apiClient.get<ApiResponse<Vulnerability>>(`/vulnerability-management/${id}`);
  },

  // Create vulnerability
  async createVulnerability(data: Partial<Vulnerability>): Promise<ApiResponse<Vulnerability>> {
    return apiClient.post<ApiResponse<Vulnerability>>('/vulnerability-management', data);
  },

  // Update vulnerability
  async updateVulnerability(id: string, data: Partial<Vulnerability>): Promise<ApiResponse<Vulnerability>> {
    return apiClient.put<ApiResponse<Vulnerability>>(`/vulnerability-management/${id}`, data);
  },

  // Delete vulnerability
  async deleteVulnerability(id: string): Promise<ApiResponse<void>> {
    return apiClient.delete<ApiResponse<void>>(`/vulnerability-management/${id}`);
  },

  // Update vulnerability status
  async updateStatus(id: string, status: string): Promise<ApiResponse<Vulnerability>> {
    return apiClient.patch<ApiResponse<Vulnerability>>(`/vulnerability-management/${id}/status`, { status });
  },

  // Run vulnerability scan
  async runScan(targets?: string[]): Promise<ApiResponse<unknown>> {
    return apiClient.post<ApiResponse<unknown>>('/vulnerability-management/scan', { targets });
  },

  // Get scan results
  async getScanResults(scanId: string): Promise<ApiResponse<unknown>> {
    return apiClient.get<ApiResponse<unknown>>(`/vulnerability-management/scans/${scanId}`);
  },
};
