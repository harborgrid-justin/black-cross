/**
 * @fileoverview Vulnerability Management API service.
 * 
 * Provides methods for vulnerability scanning, tracking, and patch management.
 * 
 * @module services/vulnerabilityService
 */

import { apiClient } from './api';
import type { Vulnerability, ApiResponse, PaginatedResponse, FilterOptions } from '@/types';

/**
 * Service for handling vulnerability management API operations.
 *
 * Provides comprehensive methods for managing vulnerabilities including scanning,
 * tracking, patch management, and status updates. Requires authentication.
 * All methods return promises and handle errors appropriately.
 *
 * @namespace vulnerabilityService
 * @example
 * ```typescript
 * // Get all critical vulnerabilities
 * const vulns = await vulnerabilityService.getVulnerabilities({
 *   severity: 'critical',
 *   status: 'open'
 * });
 *
 * // Run a vulnerability scan
 * const scanResult = await vulnerabilityService.runScan(['192.168.1.0/24']);
 * ```
 */
export const vulnerabilityService = {
  /**
   * Retrieves all vulnerabilities with optional filtering and pagination.
   *
   * @async
   * @param {FilterOptions} [filters] - Optional filter criteria including severity, status, CVE ID
   * @returns {Promise<PaginatedResponse<Vulnerability>>} Paginated list of vulnerabilities
   * @throws {Error} When the API request fails
   *
   * @example
   * ```typescript
   * const vulns = await vulnerabilityService.getVulnerabilities({
   *   severity: 'high',
   *   status: 'open',
   *   page: 1,
   *   perPage: 25
   * });
   * ```
   */
  async getVulnerabilities(filters?: FilterOptions): Promise<PaginatedResponse<Vulnerability>> {
    const params = new URLSearchParams();
    if (filters) {
      Object.entries(filters).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          params.append(key, String(value));
        }
      });
    }
    return apiClient.get<PaginatedResponse<Vulnerability>>(
      `/vulnerability-management?${params.toString()}`
    );
  },

  /**
   * Retrieves a single vulnerability by its unique identifier.
   *
   * @async
   * @param {string} id - The vulnerability ID
   * @returns {Promise<ApiResponse<Vulnerability>>} The vulnerability data with remediation details
   * @throws {Error} When the vulnerability is not found or request fails
   *
   * @example
   * ```typescript
   * const vuln = await vulnerabilityService.getVulnerability('vuln-123');
   * ```
   */
  async getVulnerability(id: string): Promise<ApiResponse<Vulnerability>> {
    return apiClient.get<ApiResponse<Vulnerability>>(`/vulnerability-management/${id}`);
  },

  /**
   * Creates a new vulnerability record.
   *
   * @async
   * @param {Partial<Vulnerability>} data - The vulnerability data including CVE ID, severity, affected assets
   * @returns {Promise<ApiResponse<Vulnerability>>} The created vulnerability
   * @throws {Error} When vulnerability creation fails or validation errors occur
   *
   * @example
   * ```typescript
   * const vuln = await vulnerabilityService.createVulnerability({
   *   cveId: 'CVE-2024-1234',
   *   severity: 'critical',
   *   cvssScore: 9.8,
   *   affectedAssets: ['server-1', 'server-2']
   * });
   * ```
   */
  async createVulnerability(data: Partial<Vulnerability>): Promise<ApiResponse<Vulnerability>> {
    return apiClient.post<ApiResponse<Vulnerability>>('/vulnerability-management', data);
  },

  /**
   * Updates an existing vulnerability.
   *
   * @async
   * @param {string} id - The vulnerability ID
   * @param {Partial<Vulnerability>} data - Fields to update
   * @returns {Promise<ApiResponse<Vulnerability>>} The updated vulnerability
   * @throws {Error} When update fails
   *
   * @example
   * ```typescript
   * await vulnerabilityService.updateVulnerability('vuln-123', {
   *   status: 'patched',
   *   patchDate: '2024-10-24'
   * });
   * ```
   */
  async updateVulnerability(id: string, data: Partial<Vulnerability>): Promise<ApiResponse<Vulnerability>> {
    return apiClient.put<ApiResponse<Vulnerability>>(`/vulnerability-management/${id}`, data);
  },

  /**
   * Deletes a vulnerability record permanently.
   *
   * @async
   * @param {string} id - The vulnerability ID
   * @returns {Promise<ApiResponse<void>>} Empty response on success
   * @throws {Error} When deletion fails
   *
   * @example
   * ```typescript
   * await vulnerabilityService.deleteVulnerability('vuln-123');
   * ```
   */
  async deleteVulnerability(id: string): Promise<ApiResponse<void>> {
    return apiClient.delete<ApiResponse<void>>(`/vulnerability-management/${id}`);
  },

  /**
   * Updates the status of a vulnerability.
   *
   * @async
   * @param {string} id - The vulnerability ID
   * @param {string} status - New status (open, patched, mitigated, accepted, false-positive)
   * @returns {Promise<ApiResponse<Vulnerability>>} The updated vulnerability
   * @throws {Error} When status update fails
   *
   * @example
   * ```typescript
   * await vulnerabilityService.updateStatus('vuln-123', 'patched');
   * ```
   */
  async updateStatus(id: string, status: string): Promise<ApiResponse<Vulnerability>> {
    return apiClient.patch<ApiResponse<Vulnerability>>(`/vulnerability-management/${id}/status`, { status });
  },

  /**
   * Initiates a vulnerability scan against specified targets.
   *
   * Scans can target individual hosts, IP ranges, or network segments.
   * Scan results are processed asynchronously.
   *
   * @async
   * @param {string[]} [targets] - Optional array of scan targets (IPs, CIDR ranges, hostnames)
   * @returns {Promise<ApiResponse<unknown>>} Scan job details with tracking ID
   * @throws {Error} When scan fails to start or invalid targets provided
   *
   * @example
   * ```typescript
   * const scanJob = await vulnerabilityService.runScan([
   *   '192.168.1.0/24',
   *   'webserver.example.com'
   * ]);
   * console.log(`Scan started: ${scanJob.data.id}`);
   * ```
   */
  async runScan(targets?: string[]): Promise<ApiResponse<unknown>> {
    return apiClient.post<ApiResponse<unknown>>('/vulnerability-management/scan', { targets });
  },

  /**
   * Retrieves the results of a vulnerability scan.
   *
   * @async
   * @param {string} scanId - The scan job ID
   * @returns {Promise<ApiResponse<unknown>>} Scan results with discovered vulnerabilities
   * @throws {Error} When scan not found or still in progress
   *
   * @example
   * ```typescript
   * const results = await vulnerabilityService.getScanResults('scan-456');
   * console.log(`Found ${results.data.vulnerabilityCount} vulnerabilities`);
   * ```
   */
  async getScanResults(scanId: string): Promise<ApiResponse<unknown>> {
    return apiClient.get<ApiResponse<unknown>>(`/vulnerability-management/scans/${scanId}`);
  },
};
