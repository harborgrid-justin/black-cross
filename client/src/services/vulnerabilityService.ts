import { apiClient } from './api';
import type { Vulnerability, ApiResponse, PaginatedResponse, FilterOptions } from '@/types';

export const vulnerabilityService = {
  // Get all vulnerabilities with optional filters
  async getVulnerabilities(filters?: FilterOptions): Promise<PaginatedResponse<Vulnerability>> {
    const params = new URLSearchParams();
    if (filters) {
      Object.entries(filters).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          params.append(key, String(value));
        }
      });
    }
    return apiClient.get<PaginatedResponse<Vulnerability>>(
      `/vulnerabilities?${params.toString()}`
    );
  },

  // Get single vulnerability by ID
  async getVulnerability(id: string): Promise<ApiResponse<Vulnerability>> {
    return apiClient.get<ApiResponse<Vulnerability>>(`/vulnerabilities/${id}`);
  },

  // Create vulnerability
  async createVulnerability(data: Partial<Vulnerability>): Promise<ApiResponse<Vulnerability>> {
    return apiClient.post<ApiResponse<Vulnerability>>('/vulnerabilities', data);
  },

  // Update vulnerability
  async updateVulnerability(id: string, data: Partial<Vulnerability>): Promise<ApiResponse<Vulnerability>> {
    return apiClient.put<ApiResponse<Vulnerability>>(`/vulnerabilities/${id}`, data);
  },

  // Delete vulnerability
  async deleteVulnerability(id: string): Promise<ApiResponse<void>> {
    return apiClient.delete<ApiResponse<void>>(`/vulnerabilities/${id}`);
  },

  // Update vulnerability status
  async updateStatus(id: string, status: string): Promise<ApiResponse<Vulnerability>> {
    return apiClient.patch<ApiResponse<Vulnerability>>(`/vulnerabilities/${id}/status`, { status });
  },

  // Run vulnerability scan
  async runScan(targets?: string[]): Promise<ApiResponse<unknown>> {
    return apiClient.post<ApiResponse<unknown>>('/vulnerabilities/scan', { targets });
  },

  // Get scan results
  async getScanResults(scanId: string): Promise<ApiResponse<unknown>> {
    return apiClient.get<ApiResponse<unknown>>(`/vulnerabilities/scans/${scanId}`);
  },
};
