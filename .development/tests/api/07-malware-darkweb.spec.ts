/**
 * API Tests - Group 7: Malware Analysis & Dark Web Monitoring
 * Tests malware analysis sandbox and dark web intelligence endpoints
 */

import { test, expect } from '@playwright/test';
import { ApiHelper } from './utils/api-helper';

test.describe('Malware Analysis & Dark Web Monitoring APIs', () => {
  let apiHelper: ApiHelper;

  test.beforeAll(async () => {
    apiHelper = new ApiHelper('http://localhost:8080');
  });

  test.describe('Malware Analysis Endpoints', () => {
    test('should access malware analysis base endpoint', async ({ request }) => {
      const response = await apiHelper.get(request, '/api/v1/malware-analysis');
      
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(500);
      
      if (response.status === 200) {
        expect(response.data).toBeDefined();
      }
    });

    test('should access malware samples endpoint', async ({ request }) => {
      const response = await apiHelper.get(request, '/api/v1/malware-analysis/samples');
      
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(500);
    });

    test('should handle malware upload endpoint', async ({ request }) => {
      const response = await apiHelper.post(request, '/api/v1/malware-analysis/upload', {
        filename: 'test-sample.bin',
        hash: 'abc123',
      });
      
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(600);
    });

    test('should access specific sample endpoint', async ({ request }) => {
      const response = await apiHelper.get(request, '/api/v1/malware-analysis/samples/test-id');
      
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(500);
    });

    test('should handle sample analyze endpoint', async ({ request }) => {
      const response = await apiHelper.post(request, '/api/v1/malware-analysis/samples/test-id/analyze', {});
      
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(600);
    });

    test('should access sample report endpoint', async ({ request }) => {
      const response = await apiHelper.get(request, '/api/v1/malware-analysis/samples/test-id/report');
      
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(500);
    });
  });

  test.describe('Dark Web Monitoring Endpoints', () => {
    test('should access dark web base endpoint', async ({ request }) => {
      const response = await apiHelper.get(request, '/api/v1/dark-web');
      
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(500);
      
      if (response.status === 200) {
        expect(response.data).toBeDefined();
      }
    });

    test('should access dark web intel endpoint', async ({ request }) => {
      const response = await apiHelper.get(request, '/api/v1/dark-web/intel');
      
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(500);
    });

    test('should access dark web monitor endpoint', async ({ request }) => {
      const response = await apiHelper.get(request, '/api/v1/dark-web/monitor');
      
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(500);
    });

    test('should access dark web alerts endpoint', async ({ request }) => {
      const response = await apiHelper.get(request, '/api/v1/dark-web/alerts');
      
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(500);
    });

    test('should handle POST to dark web intel', async ({ request }) => {
      const response = await apiHelper.post(request, '/api/v1/dark-web/intel', {
        source: 'test',
        keywords: ['test'],
      });
      
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(600);
    });
  });

  test.describe('Malware-DarkWeb Integration', () => {
    test('should verify both modules are accessible', async ({ request }) => {
      const malwareResponse = await apiHelper.get(request, '/api/v1/malware-analysis');
      const darkwebResponse = await apiHelper.get(request, '/api/v1/dark-web');
      
      expect(malwareResponse.status).toBeGreaterThanOrEqual(200);
      expect(darkwebResponse.status).toBeGreaterThanOrEqual(200);
      
      expect(malwareResponse.data).toBeDefined();
      expect(darkwebResponse.data).toBeDefined();
    });
  });
});
