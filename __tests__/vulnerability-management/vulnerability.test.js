/**
 * Vulnerability Management Tests
 * 
 * Comprehensive test suite for vulnerability management module
 */

const request = require('supertest');
const app = require('../../src/index');

describe('Vulnerability Management Module', () => {
  let scanId;
  let vulnerabilityId;
  let remediationId;

  // Clean up after tests
  afterAll(async () => {
    const { 
      vulnerabilityRepository, 
      scanRepository, 
      remediationRepository 
    } = require('../../src/modules/vulnerability-management/repositories');
    
    await vulnerabilityRepository.clear();
    await scanRepository.clear();
    await remediationRepository.clear();
  });

  describe('Module Health', () => {
    test('should return module health status', async () => {
      const response = await request(app)
        .get('/api/v1/vulnerabilities/health')
        .expect(200);

      expect(response.body.module).toBe('vulnerability-management');
      expect(response.body.status).toBe('operational');
      expect(response.body.features).toContain('vulnerability-scanning');
    });
  });

  describe('Scanning Operations', () => {
    test('should initiate a vulnerability scan', async () => {
      const response = await request(app)
        .post('/api/v1/vulnerabilities/scan')
        .send({
          name: 'Test Scan',
          scanner_type: 'nessus',
          target_assets: ['server-01', 'server-02'],
          scan_type: 'full'
        })
        .expect(201);

      expect(response.body.success).toBe(true);
      expect(response.body.data).toHaveProperty('id');
      expect(response.body.data.name).toBe('Test Scan');
      scanId = response.body.data.id;
    });

    test('should list scans', async () => {
      const response = await request(app)
        .get('/api/v1/vulnerabilities/scans')
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data).toBeInstanceOf(Array);
      expect(response.body.total).toBeGreaterThan(0);
    });

    test('should get scan by ID', async () => {
      const response = await request(app)
        .get(`/api/v1/vulnerabilities/scans/${scanId}`)
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data.id).toBe(scanId);
    });

    test('should validate scan input', async () => {
      const response = await request(app)
        .post('/api/v1/vulnerabilities/scan')
        .send({
          name: 'Invalid Scan'
          // Missing required fields
        })
        .expect(400);

      expect(response.body).toHaveProperty('error');
    });
  });

  describe('Vulnerability Operations', () => {
    test('should list vulnerabilities', async () => {
      // Wait for scan to complete and create vulnerabilities
      await new Promise(resolve => setTimeout(resolve, 500));

      const response = await request(app)
        .get('/api/v1/vulnerabilities')
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data).toBeInstanceOf(Array);
      
      if (response.body.data.length > 0) {
        vulnerabilityId = response.body.data[0].id;
      }
    });

    test('should get vulnerability by ID', async () => {
      if (!vulnerabilityId) {
        return; // Skip if no vulnerabilities
      }

      const response = await request(app)
        .get(`/api/v1/vulnerabilities/${vulnerabilityId}`)
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data.id).toBe(vulnerabilityId);
    });

    test('should update vulnerability', async () => {
      if (!vulnerabilityId) {
        return;
      }

      const response = await request(app)
        .patch(`/api/v1/vulnerabilities/${vulnerabilityId}`)
        .send({
          priority: 'critical',
          assigned_to: 'security-team'
        })
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data.priority).toBe('critical');
    });

    test('should create manual vulnerability', async () => {
      const response = await request(app)
        .post('/api/v1/vulnerabilities')
        .send({
          title: 'Manual Test Vulnerability',
          description: 'Test description',
          severity: 'medium',
          cvss_score: 5.5
        })
        .expect(201);

      expect(response.body.success).toBe(true);
      expect(response.body.data.title).toBe('Manual Test Vulnerability');
    });
  });

  describe('CVE Operations', () => {
    test('should create CVE', async () => {
      const response = await request(app)
        .post('/api/v1/vulnerabilities/cves')
        .send({
          cve_id: 'CVE-2024-99999',
          description: 'Test CVE',
          cvss_v3_score: 8.5,
          severity: 'high',
          exploit_available: true
        })
        .expect(201);

      expect(response.body.success).toBe(true);
      expect(response.body.data.cve_id).toBe('CVE-2024-99999');
    });

    test('should list CVEs', async () => {
      const response = await request(app)
        .get('/api/v1/vulnerabilities/cves')
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data).toBeInstanceOf(Array);
    });

    test('should validate CVE ID format', async () => {
      const response = await request(app)
        .post('/api/v1/vulnerabilities/cves')
        .send({
          cve_id: 'INVALID-FORMAT',
          description: 'Test'
        })
        .expect(400);

      expect(response.body).toHaveProperty('error');
    });
  });

  describe('Prioritization', () => {
    test('should prioritize vulnerabilities', async () => {
      const response = await request(app)
        .post('/api/v1/vulnerabilities/prioritize')
        .send({})
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data).toHaveProperty('vulnerabilities');
      expect(response.body.data).toHaveProperty('summary');
    });

    test('should get priority list', async () => {
      const response = await request(app)
        .get('/api/v1/vulnerabilities/priority-list?limit=10')
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data).toBeInstanceOf(Array);
    });

    test('should get prioritization rules', async () => {
      const response = await request(app)
        .get('/api/v1/vulnerabilities/prioritization-rules')
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data).toHaveProperty('factors');
      expect(response.body.data).toHaveProperty('priority_thresholds');
    });
  });

  describe('Remediation Operations', () => {
    test('should create remediation task', async () => {
      if (!vulnerabilityId) {
        return;
      }

      const response = await request(app)
        .post(`/api/v1/vulnerabilities/${vulnerabilityId}/remediate`)
        .send({
          title: 'Test Remediation',
          description: 'Fix the vulnerability',
          remediation_type: 'patch',
          priority: 'high',
          assigned_to: 'admin'
        })
        .expect(201);

      expect(response.body.success).toBe(true);
      expect(response.body.data.title).toBe('Test Remediation');
      remediationId = response.body.data.id;
    });

    test('should list remediations', async () => {
      const response = await request(app)
        .get('/api/v1/vulnerabilities/remediations')
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data).toBeInstanceOf(Array);
    });

    test('should get remediation metrics', async () => {
      const response = await request(app)
        .get('/api/v1/vulnerabilities/remediations/metrics')
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data).toHaveProperty('total');
      expect(response.body.data).toHaveProperty('by_status');
    });

    test('should complete remediation', async () => {
      if (!remediationId) {
        return;
      }

      const response = await request(app)
        .post(`/api/v1/vulnerabilities/remediations/${remediationId}/complete`)
        .send({
          notes: 'Fixed successfully'
        })
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data.status).toBe('completed');
    });
  });

  describe('Patch Management', () => {
    test('should create patch', async () => {
      const response = await request(app)
        .post('/api/v1/vulnerabilities/patches')
        .send({
          name: 'Test Patch',
          vendor: 'TestVendor',
          product: 'TestProduct',
          patch_id: 'PATCH-001',
          description: 'Security patch',
          severity: 'high',
          deployment_priority: 'high'
        })
        .expect(201);

      expect(response.body.success).toBe(true);
      expect(response.body.data.name).toBe('Test Patch');
    });

    test('should list patches', async () => {
      const response = await request(app)
        .get('/api/v1/vulnerabilities/patches')
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data).toBeInstanceOf(Array);
    });
  });

  describe('Asset Mapping', () => {
    test('should create asset mapping', async () => {
      if (!vulnerabilityId) {
        return;
      }

      const response = await request(app)
        .post('/api/v1/vulnerabilities/map')
        .send({
          asset_id: 'asset-001',
          asset_name: 'Test Asset',
          asset_type: 'server',
          vulnerability_id: vulnerabilityId,
          exposure_level: 'external',
          asset_criticality: 8
        })
        .expect(201);

      expect(response.body.success).toBe(true);
      expect(response.body.data.asset_id).toBe('asset-001');
    });

    test('should get heat map', async () => {
      const response = await request(app)
        .get('/api/v1/vulnerabilities/heatmap')
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data).toBeInstanceOf(Array);
    });
  });

  describe('Trend Analysis', () => {
    test('should get vulnerability trends', async () => {
      const response = await request(app)
        .get('/api/v1/vulnerabilities/trends?period=30d')
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data).toHaveProperty('trend_data');
      expect(response.body.data).toHaveProperty('summary');
    });

    test('should get analytics', async () => {
      const response = await request(app)
        .get('/api/v1/vulnerabilities/analytics')
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data).toHaveProperty('aging');
      expect(response.body.data).toHaveProperty('severity_trends');
      expect(response.body.data).toHaveProperty('lifecycle');
      expect(response.body.data).toHaveProperty('velocity');
      expect(response.body.data).toHaveProperty('predictive');
    });
  });
});
