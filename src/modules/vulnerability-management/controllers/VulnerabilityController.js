/**
 * Vulnerability Controller
 *
 * HTTP request handlers for vulnerability management endpoints
 */

const services = require('../services');
const { vulnerabilitySchemas, querySchemas } = require('../validators');

class VulnerabilityController {
  /**
   * Create vulnerability
   * POST /api/v1/vulnerabilities
   */
  async create(req, res) {
    try {
      const { error, value } = vulnerabilitySchemas.create.validate(req.body);
      if (error) {
        return res.status(400).json({ error: error.details[0].message });
      }

      const { vulnerabilityRepository } = require('../repositories');
      const vulnerability = await vulnerabilityRepository.create(value);

      res.status(201).json({
        success: true,
        data: vulnerability.toJSON()
      });
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  }

  /**
   * Get vulnerability by ID
   * GET /api/v1/vulnerabilities/:id
   */
  async getById(req, res) {
    try {
      const { vulnerabilityRepository } = require('../repositories');
      const vulnerability = await vulnerabilityRepository.findById(req.params.id);

      if (!vulnerability) {
        return res.status(404).json({ error: 'Vulnerability not found' });
      }

      res.json({
        success: true,
        data: vulnerability.toJSON()
      });
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  }

  /**
   * List vulnerabilities
   * GET /api/v1/vulnerabilities
   */
  async list(req, res) {
    try {
      const { vulnerabilityRepository } = require('../repositories');
      const filters = {
        ...req.query,
        page: parseInt(req.query.page) || 1,
        limit: parseInt(req.query.limit) || 50
      };

      const result = await vulnerabilityRepository.findAll(filters);

      res.json({
        success: true,
        ...result
      });
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  }

  /**
   * Update vulnerability
   * PATCH /api/v1/vulnerabilities/:id
   */
  async update(req, res) {
    try {
      const { error, value } = vulnerabilitySchemas.update.validate(req.body);
      if (error) {
        return res.status(400).json({ error: error.details[0].message });
      }

      const { vulnerabilityRepository } = require('../repositories');
      const vulnerability = await vulnerabilityRepository.update(req.params.id, value);

      if (!vulnerability) {
        return res.status(404).json({ error: 'Vulnerability not found' });
      }

      res.json({
        success: true,
        data: vulnerability.toJSON()
      });
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  }

  /**
   * Delete vulnerability
   * DELETE /api/v1/vulnerabilities/:id
   */
  async delete(req, res) {
    try {
      const { vulnerabilityRepository } = require('../repositories');
      const deleted = await vulnerabilityRepository.delete(req.params.id);

      if (!deleted) {
        return res.status(404).json({ error: 'Vulnerability not found' });
      }

      res.json({
        success: true,
        message: 'Vulnerability deleted successfully'
      });
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  }

  /**
   * Get vulnerability statistics
   * GET /api/v1/vulnerabilities/stats
   */
  async getStatistics(req, res) {
    try {
      const { vulnerabilityRepository } = require('../repositories');
      const stats = await vulnerabilityRepository.getStatistics();

      res.json({
        success: true,
        data: stats
      });
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  }
}

module.exports = new VulnerabilityController();
