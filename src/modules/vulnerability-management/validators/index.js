/**
 * Validation Schemas
 * 
 * Joi validation schemas for vulnerability management
 */

const Joi = require('joi');

// Scan validation schemas
const scanSchemas = {
  create: Joi.object({
    name: Joi.string().required(),
    scanner_type: Joi.string().valid('nessus', 'qualys', 'openvas', 'custom').required(),
    target_assets: Joi.array().items(Joi.string()).min(1).required(),
    scan_type: Joi.string().valid('full', 'incremental', 'compliance').default('full'),
    scan_policy: Joi.string().optional(),
    created_by: Joi.string().optional()
  }),
  
  schedule: Joi.object({
    name: Joi.string().required(),
    scanner_type: Joi.string().valid('nessus', 'qualys', 'openvas', 'custom').required(),
    target_assets: Joi.array().items(Joi.string()).min(1).required(),
    scan_type: Joi.string().valid('full', 'incremental', 'compliance').default('full'),
    schedule_pattern: Joi.string().valid('daily', 'weekly', 'monthly').required(),
    created_by: Joi.string().optional()
  })
};

// CVE validation schemas
const cveSchemas = {
  create: Joi.object({
    cve_id: Joi.string().pattern(/^CVE-\d{4}-\d{4,}$/).required(),
    description: Joi.string().required(),
    published_date: Joi.date().optional(),
    cvss_v3_score: Joi.number().min(0).max(10).optional(),
    cvss_v3_vector: Joi.string().optional(),
    cvss_v2_score: Joi.number().min(0).max(10).optional(),
    cvss_v2_vector: Joi.string().optional(),
    severity: Joi.string().valid('critical', 'high', 'medium', 'low').optional(),
    cwe_ids: Joi.array().items(Joi.string()).optional(),
    references: Joi.array().items(Joi.string()).optional(),
    affected_products: Joi.array().items(Joi.string()).optional(),
    exploit_available: Joi.boolean().optional(),
    exploit_maturity: Joi.string().valid('unproven', 'proof_of_concept', 'functional', 'high').optional(),
    patch_available: Joi.boolean().optional()
  })
};

// Vulnerability validation schemas
const vulnerabilitySchemas = {
  create: Joi.object({
    cve_id: Joi.string().optional(),
    title: Joi.string().required(),
    description: Joi.string().required(),
    severity: Joi.string().valid('critical', 'high', 'medium', 'low', 'info').required(),
    cvss_score: Joi.number().min(0).max(10).optional(),
    cvss_vector: Joi.string().optional(),
    affected_assets: Joi.array().items(Joi.string()).optional(),
    exploitable: Joi.boolean().optional(),
    patch_available: Joi.boolean().optional(),
    scanner_source: Joi.string().optional(),
    tags: Joi.array().items(Joi.string()).optional(),
    references: Joi.array().items(Joi.string()).optional()
  }),
  
  update: Joi.object({
    title: Joi.string().optional(),
    description: Joi.string().optional(),
    severity: Joi.string().valid('critical', 'high', 'medium', 'low', 'info').optional(),
    status: Joi.string().valid('open', 'in_progress', 'remediated', 'accepted_risk', 'false_positive').optional(),
    assigned_to: Joi.string().optional(),
    priority: Joi.string().valid('critical', 'high', 'medium', 'low').optional(),
    tags: Joi.array().items(Joi.string()).optional()
  })
};

// Asset mapping validation schemas
const mappingSchemas = {
  create: Joi.object({
    asset_id: Joi.string().required(),
    asset_name: Joi.string().required(),
    asset_type: Joi.string().required(),
    vulnerability_id: Joi.string().required(),
    exposure_level: Joi.string().valid('external', 'internal', 'isolated').default('internal'),
    asset_criticality: Joi.number().min(1).max(10).default(5),
    business_unit: Joi.string().optional(),
    environment: Joi.string().valid('production', 'staging', 'development', 'test').default('production'),
    port: Joi.number().optional(),
    protocol: Joi.string().optional(),
    service: Joi.string().optional()
  }),
  
  bulkCreate: Joi.object({
    mappings: Joi.array().items(Joi.object({
      asset_id: Joi.string().required(),
      asset_name: Joi.string().required(),
      asset_type: Joi.string().required(),
      vulnerability_id: Joi.string().required(),
      exposure_level: Joi.string().valid('external', 'internal', 'isolated').default('internal'),
      asset_criticality: Joi.number().min(1).max(10).default(5)
    })).min(1).required()
  })
};

// Patch validation schemas
const patchSchemas = {
  create: Joi.object({
    name: Joi.string().required(),
    vendor: Joi.string().required(),
    product: Joi.string().required(),
    version: Joi.string().optional(),
    patch_id: Joi.string().required(),
    description: Joi.string().required(),
    severity: Joi.string().valid('critical', 'high', 'medium', 'low').default('medium'),
    patch_type: Joi.string().valid('security', 'feature', 'bugfix').default('security'),
    release_date: Joi.date().optional(),
    addressed_vulnerabilities: Joi.array().items(Joi.string()).optional(),
    addressed_cves: Joi.array().items(Joi.string()).optional(),
    deployment_priority: Joi.string().valid('critical', 'high', 'medium', 'low').default('medium'),
    requires_reboot: Joi.boolean().optional(),
    download_url: Joi.string().uri().optional(),
    documentation_url: Joi.string().uri().optional()
  }),
  
  deploy: Joi.object({
    notes: Joi.string().optional(),
    deployed_by: Joi.string().required()
  }),
  
  test: Joi.object({
    testing_notes: Joi.string().required()
  })
};

// Remediation validation schemas
const remediationSchemas = {
  create: Joi.object({
    vulnerability_id: Joi.string().required(),
    title: Joi.string().required(),
    description: Joi.string().required(),
    remediation_type: Joi.string().valid('patch', 'configuration', 'workaround', 'mitigation', 'accept_risk').default('patch'),
    priority: Joi.string().valid('critical', 'high', 'medium', 'low').default('medium'),
    assigned_to: Joi.string().optional(),
    assigned_team: Joi.string().optional(),
    due_date: Joi.date().optional(),
    remediation_steps: Joi.array().items(Joi.string()).optional(),
    affected_assets: Joi.array().items(Joi.string()).optional(),
    patch_id: Joi.string().optional(),
    cost_estimate: Joi.number().optional(),
    created_by: Joi.string().optional()
  }),
  
  complete: Joi.object({
    notes: Joi.string().optional(),
    actual_cost: Joi.number().optional()
  }),
  
  verify: Joi.object({
    method: Joi.string().required(),
    notes: Joi.string().optional()
  }),
  
  acceptRisk: Joi.object({
    reason: Joi.string().required(),
    accepted_by: Joi.string().required(),
    expires_at: Joi.date().optional()
  }),
  
  assign: Joi.object({
    assigned_to: Joi.string().optional(),
    assigned_team: Joi.string().optional()
  }).or('assigned_to', 'assigned_team')
};

// Query filter schemas
const querySchemas = {
  pagination: Joi.object({
    page: Joi.number().integer().min(1).default(1),
    limit: Joi.number().integer().min(1).max(100).default(50)
  }),
  
  vulnerabilityFilters: Joi.object({
    status: Joi.string().valid('open', 'in_progress', 'remediated', 'accepted_risk', 'false_positive').optional(),
    severity: Joi.string().valid('critical', 'high', 'medium', 'low', 'info').optional(),
    priority: Joi.string().valid('critical', 'high', 'medium', 'low').optional(),
    exploitable: Joi.boolean().optional(),
    scan_id: Joi.string().optional(),
    assigned_to: Joi.string().optional()
  })
};

module.exports = {
  scanSchemas,
  cveSchemas,
  vulnerabilitySchemas,
  mappingSchemas,
  patchSchemas,
  remediationSchemas,
  querySchemas
};
