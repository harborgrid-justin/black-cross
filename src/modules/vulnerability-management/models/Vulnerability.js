/**
 * Vulnerability Model
 * 
 * Represents a security vulnerability with comprehensive tracking
 * including CVE information, affected assets, and remediation status
 */

const { v4: uuidv4 } = require('uuid');

class Vulnerability {
  constructor(data = {}) {
    this.id = data.id || uuidv4();
    this.cve_id = data.cve_id || null;
    this.title = data.title || '';
    this.description = data.description || '';
    this.severity = data.severity || 'medium'; // critical, high, medium, low, info
    this.cvss_score = data.cvss_score || 0.0;
    this.cvss_vector = data.cvss_vector || null;
    this.affected_assets = data.affected_assets || [];
    this.exploitable = data.exploitable !== undefined ? data.exploitable : false;
    this.patch_available = data.patch_available !== undefined ? data.patch_available : false;
    this.status = data.status || 'open'; // open, in_progress, remediated, accepted_risk, false_positive
    this.discovered_at = data.discovered_at || new Date();
    this.remediated_at = data.remediated_at || null;
    this.risk_score = data.risk_score || 0.0;
    this.scanner_source = data.scanner_source || null;
    this.scan_id = data.scan_id || null;
    this.assigned_to = data.assigned_to || null;
    this.priority = data.priority || 'medium'; // critical, high, medium, low
    this.tags = data.tags || [];
    this.references = data.references || [];
    this.created_at = data.created_at || new Date();
    this.updated_at = data.updated_at || new Date();
  }

  /**
   * Calculate risk score based on multiple factors
   */
  calculateRiskScore(assetCriticality = 5, threatLevel = 5) {
    const cvssWeight = 0.4;
    const exploitabilityWeight = 0.3;
    const assetWeight = 0.2;
    const threatWeight = 0.1;

    const cvssComponent = (this.cvss_score / 10) * cvssWeight;
    const exploitComponent = this.exploitable ? exploitabilityWeight : 0;
    const assetComponent = (assetCriticality / 10) * assetWeight;
    const threatComponent = (threatLevel / 10) * threatWeight;

    this.risk_score = ((cvssComponent + exploitComponent + assetComponent + threatComponent) * 100).toFixed(2);
    return this.risk_score;
  }

  /**
   * Update vulnerability status
   */
  updateStatus(newStatus) {
    this.status = newStatus;
    this.updated_at = new Date();
    if (newStatus === 'remediated') {
      this.remediated_at = new Date();
    }
  }

  /**
   * Convert to plain object for storage/API
   */
  toJSON() {
    return {
      id: this.id,
      cve_id: this.cve_id,
      title: this.title,
      description: this.description,
      severity: this.severity,
      cvss_score: this.cvss_score,
      cvss_vector: this.cvss_vector,
      affected_assets: this.affected_assets,
      exploitable: this.exploitable,
      patch_available: this.patch_available,
      status: this.status,
      discovered_at: this.discovered_at,
      remediated_at: this.remediated_at,
      risk_score: this.risk_score,
      scanner_source: this.scanner_source,
      scan_id: this.scan_id,
      assigned_to: this.assigned_to,
      priority: this.priority,
      tags: this.tags,
      references: this.references,
      created_at: this.created_at,
      updated_at: this.updated_at
    };
  }
}

module.exports = Vulnerability;
