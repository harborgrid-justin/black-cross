/**
 * Scan Model
 * 
 * Represents a vulnerability scan execution
 */

const { v4: uuidv4 } = require('uuid');

class Scan {
  constructor(data = {}) {
    this.id = data.id || uuidv4();
    this.name = data.name || '';
    this.scanner_type = data.scanner_type || ''; // nessus, qualys, openvas, custom
    this.target_assets = data.target_assets || [];
    this.scan_type = data.scan_type || 'full'; // full, incremental, compliance
    this.status = data.status || 'pending'; // pending, running, completed, failed, cancelled
    this.started_at = data.started_at || null;
    this.completed_at = data.completed_at || null;
    this.duration_seconds = data.duration_seconds || null;
    this.vulnerabilities_found = data.vulnerabilities_found || 0;
    this.critical_count = data.critical_count || 0;
    this.high_count = data.high_count || 0;
    this.medium_count = data.medium_count || 0;
    this.low_count = data.low_count || 0;
    this.info_count = data.info_count || 0;
    this.scan_policy = data.scan_policy || null;
    this.scheduled = data.scheduled !== undefined ? data.scheduled : false;
    this.schedule_pattern = data.schedule_pattern || null;
    this.next_scheduled_at = data.next_scheduled_at || null;
    this.results_summary = data.results_summary || {};
    this.error_message = data.error_message || null;
    this.created_by = data.created_by || null;
    this.created_at = data.created_at || new Date();
    this.updated_at = data.updated_at || new Date();
  }

  /**
   * Start the scan
   */
  start() {
    this.status = 'running';
    this.started_at = new Date();
    this.updated_at = new Date();
  }

  /**
   * Complete the scan with results
   */
  complete(results = {}) {
    this.status = 'completed';
    this.completed_at = new Date();
    if (this.started_at) {
      this.duration_seconds = Math.floor((this.completed_at - this.started_at) / 1000);
    }
    this.vulnerabilities_found = results.total || 0;
    this.critical_count = results.critical || 0;
    this.high_count = results.high || 0;
    this.medium_count = results.medium || 0;
    this.low_count = results.low || 0;
    this.info_count = results.info || 0;
    this.updated_at = new Date();
  }

  /**
   * Mark scan as failed
   */
  fail(errorMessage) {
    this.status = 'failed';
    this.completed_at = new Date();
    this.error_message = errorMessage;
    this.updated_at = new Date();
  }

  /**
   * Get scan coverage percentage
   */
  getCoverage() {
    return {
      total_assets: this.target_assets.length,
      scanned_assets: this.target_assets.length,
      coverage_percentage: 100
    };
  }

  /**
   * Convert to plain object for storage/API
   */
  toJSON() {
    return {
      id: this.id,
      name: this.name,
      scanner_type: this.scanner_type,
      target_assets: this.target_assets,
      scan_type: this.scan_type,
      status: this.status,
      started_at: this.started_at,
      completed_at: this.completed_at,
      duration_seconds: this.duration_seconds,
      vulnerabilities_found: this.vulnerabilities_found,
      critical_count: this.critical_count,
      high_count: this.high_count,
      medium_count: this.medium_count,
      low_count: this.low_count,
      info_count: this.info_count,
      scan_policy: this.scan_policy,
      scheduled: this.scheduled,
      schedule_pattern: this.schedule_pattern,
      next_scheduled_at: this.next_scheduled_at,
      results_summary: this.results_summary,
      error_message: this.error_message,
      created_by: this.created_by,
      created_at: this.created_at,
      updated_at: this.updated_at
    };
  }
}

module.exports = Scan;
