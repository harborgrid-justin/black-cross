/**
 * Pattern Extraction Utilities for IOC Extraction
 */

// Regular expressions for IOC extraction
const patterns = {
  ipv4: /\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b/g,
  domain: /\b(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}\b/g,
  url: /https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_+.~#?&/=]*)/gi,
  email: /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g,
  md5: /\b[a-fA-F0-9]{32}\b/g,
  sha1: /\b[a-fA-F0-9]{40}\b/g,
  sha256: /\b[a-fA-F0-9]{64}\b/g,
  cryptocurrency: {
    bitcoin: /\b[13][a-km-zA-HJ-NP-Z1-9]{25,34}\b/g,
    ethereum: /\b0x[a-fA-F0-9]{40}\b/g,
  },
  registry: /HKEY_(?:LOCAL_MACHINE|CURRENT_USER|CLASSES_ROOT|USERS|CURRENT_CONFIG)\\[^"\s]*/gi,
};

/**
 * Extract IP addresses from text
 */
function extractIPs(text) {
  const matches = text.match(patterns.ipv4) || [];
  return [...new Set(matches)];
}

/**
 * Extract domain names from text
 */
function extractDomains(text) {
  const matches = text.match(patterns.domain) || [];
  // Filter out IPs and common false positives
  return [...new Set(matches)].filter((d) => !d.match(patterns.ipv4));
}

/**
 * Extract URLs from text
 */
function extractURLs(text) {
  const matches = text.match(patterns.url) || [];
  return [...new Set(matches)];
}

/**
 * Extract email addresses from text
 */
function extractEmails(text) {
  const matches = text.match(patterns.email) || [];
  return [...new Set(matches)];
}

/**
 * Extract file hashes from text
 */
function extractHashes(text) {
  const md5Matches = text.match(patterns.md5) || [];
  const sha1Matches = text.match(patterns.sha1) || [];
  const sha256Matches = text.match(patterns.sha256) || [];

  return {
    md5: [...new Set(md5Matches)],
    sha1: [...new Set(sha1Matches)],
    sha256: [...new Set(sha256Matches)],
  };
}

/**
 * Extract cryptocurrency addresses from text
 */
function extractCryptoAddresses(text) {
  const bitcoinMatches = text.match(patterns.cryptocurrency.bitcoin) || [];
  const ethereumMatches = text.match(patterns.cryptocurrency.ethereum) || [];

  return {
    bitcoin: [...new Set(bitcoinMatches)],
    ethereum: [...new Set(ethereumMatches)],
  };
}

/**
 * Extract registry keys from text
 */
function extractRegistryKeys(text) {
  const matches = text.match(patterns.registry) || [];
  return [...new Set(matches)];
}

/**
 * Extract all IOCs from text
 */
function extractAllIOCs(text) {
  const hashes = extractHashes(text);
  const crypto = extractCryptoAddresses(text);

  return {
    ips: extractIPs(text),
    domains: extractDomains(text),
    urls: extractURLs(text),
    emails: extractEmails(text),
    hashes,
    cryptocurrency: crypto,
    registry_keys: extractRegistryKeys(text),
  };
}

module.exports = {
  extractIPs,
  extractDomains,
  extractURLs,
  extractEmails,
  extractHashes,
  extractCryptoAddresses,
  extractRegistryKeys,
  extractAllIOCs,
};
