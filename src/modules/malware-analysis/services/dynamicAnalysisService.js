/**
 * Dynamic Analysis Service
 * Simulates dynamic malware analysis in a sandbox
 */

const MalwareSample = require('../models/MalwareSample');
const logger = require('../utils/logger');

class DynamicAnalysisService {
  /**
   * Perform dynamic analysis on a sample
   */
  async analyze(sampleId, environmentId) {
    try {
      const sample = await MalwareSample.findOne({ id: sampleId });
      if (!sample) {
        throw new Error('Sample not found');
      }

      logger.info(`Starting dynamic analysis for sample: ${sampleId}`);

      const startTime = Date.now();

      // Simulate dynamic analysis execution
      const analysis = {
        execution_time: 0,
        processes_created: this.simulateProcessCreation(),
        api_calls: this.simulateAPICalls(),
        network_activity: this.simulateNetworkActivity(),
        memory_dumps: this.simulateMemoryDumps(),
      };

      const endTime = Date.now();
      analysis.execution_time = endTime - startTime;

      // Update sample with analysis results
      sample.dynamic_analysis = analysis;
      sample.sandbox_execution = {
        environment_id: environmentId,
        started_at: new Date(startTime),
        completed_at: new Date(endTime),
        duration: analysis.execution_time,
        status: 'completed',
      };

      await sample.save();

      logger.info(`Dynamic analysis completed for sample: ${sampleId}`);

      return analysis;
    } catch (error) {
      logger.error('Error performing dynamic analysis:', error);
      throw error;
    }
  }

  /**
   * Simulate process creation during execution
   */
  simulateProcessCreation() {
    const processes = [
      {
        name: 'malware.exe',
        pid: 1234,
        command_line: 'C:\\malware.exe',
      },
      {
        name: 'cmd.exe',
        pid: 5678,
        command_line: 'cmd.exe /c "reg add HKLM\\Software\\..."',
      },
    ];

    return processes.slice(0, Math.floor(Math.random() * 2) + 1);
  }

  /**
   * Simulate API calls monitoring
   */
  simulateAPICalls() {
    const apis = [
      { api: 'CreateFileA', count: 5, parameters: { filename: 'C:\\temp\\dropped.dll' } },
      { api: 'WriteFile', count: 3, parameters: {} },
      { api: 'RegSetValueExA', count: 2, parameters: { key: 'HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' } },
      { api: 'InternetOpenA', count: 1, parameters: {} },
      { api: 'InternetConnectA', count: 1, parameters: { server: '192.168.1.100' } },
      { api: 'CreateProcessA', count: 2, parameters: { filename: 'cmd.exe' } },
    ];

    return apis.slice(0, Math.floor(Math.random() * 6) + 3);
  }

  /**
   * Simulate network activity monitoring
   */
  simulateNetworkActivity() {
    const activities = [
      {
        protocol: 'TCP',
        direction: 'outbound',
        source: '192.168.1.50',
        destination: '203.0.113.45',
        port: 80,
        data_size: 1024,
      },
      {
        protocol: 'TCP',
        direction: 'outbound',
        source: '192.168.1.50',
        destination: '203.0.113.45',
        port:443,
        data_size: 2048,
      },
      {
        protocol: 'DNS',
        direction: 'outbound',
        source: '192.168.1.50',
        destination: '8.8.8.8',
        port: 53,
        data_size: 64,
      },
    ];

    return activities.slice(0, Math.floor(Math.random() * 3) + 1);
  }

  /**
   * Simulate memory dump collection
   */
  simulateMemoryDumps() {
    return [
      {
        process_name: 'malware.exe',
        size: 10485760, // 10MB
        location: '/sandbox/dumps/malware_1234.dmp',
      },
    ];
  }

  /**
   * Get dynamic analysis results for a sample
   */
  async getAnalysis(sampleId) {
    try {
      const sample = await MalwareSample.findOne({ id: sampleId });
      if (!sample) {
        throw new Error('Sample not found');
      }

      if (!sample.dynamic_analysis) {
        throw new Error('Dynamic analysis not yet performed');
      }

      return sample.dynamic_analysis;
    } catch (error) {
      logger.error('Error getting dynamic analysis:', error);
      throw error;
    }
  }

  /**
   * Stop a running analysis
   */
  async stopAnalysis(sampleId) {
    try {
      const sample = await MalwareSample.findOne({ id: sampleId });
      if (!sample) {
        throw new Error('Sample not found');
      }

      if (sample.sandbox_execution) {
        sample.sandbox_execution.status = 'stopped';
        sample.status = 'failed';
        await sample.save();
      }

      logger.info(`Analysis stopped for sample: ${sampleId}`);
      return { message: 'Analysis stopped successfully' };
    } catch (error) {
      logger.error('Error stopping analysis:', error);
      throw error;
    }
  }
}

module.exports = new DynamicAnalysisService();
