/**
 * Malware Sample Data Model
 */

const mongoose = require('mongoose');
const { v4: uuidv4 } = require('uuid');

const MalwareSampleSchema = new mongoose.Schema({
  id: {
    type: String,
    default: uuidv4,
    unique: true,
    index: true,
  },
  file_name: {
    type: String,
    required: true,
    trim: true,
  },
  file_size: {
    type: Number,
    required: true,
  },
  file_type: {
    type: String,
    required: true,
  },
  md5: {
    type: String,
    required: true,
    unique: true,
    index: true,
  },
  sha1: {
    type: String,
    required: true,
    unique: true,
    index: true,
  },
  sha256: {
    type: String,
    required: true,
    unique: true,
    index: true,
  },
  submitted_at: {
    type: Date,
    default: Date.now,
    index: true,
  },
  submitted_by: {
    type: String,
    required: true,
  },
  status: {
    type: String,
    enum: ['pending', 'queued', 'analyzing', 'completed', 'failed', 'error'],
    default: 'pending',
    index: true,
  },
  priority: {
    type: String,
    enum: ['low', 'medium', 'high', 'critical'],
    default: 'medium',
    index: true,
  },
  malware_family: {
    type: String,
    trim: true,
    index: true,
  },
  classification: {
    type: String,
    enum: ['trojan', 'ransomware', 'worm', 'virus', 'backdoor', 'rootkit', 'spyware', 'adware', 'other', 'unknown'],
    default: 'unknown',
    index: true,
  },
  threat_level: {
    type: String,
    enum: ['critical', 'high', 'medium', 'low', 'info'],
    default: 'medium',
    index: true,
  },
  confidence_score: {
    type: Number,
    min: 0,
    max: 100,
    default: 0,
  },
  static_analysis: {
    strings: [String],
    entropy: Number,
    pe_headers: mongoose.Schema.Types.Mixed,
    elf_headers: mongoose.Schema.Types.Mixed,
    imports: [String],
    exports: [String],
    sections: mongoose.Schema.Types.Mixed,
    resources: mongoose.Schema.Types.Mixed,
    certificates: mongoose.Schema.Types.Mixed,
    packer_detected: Boolean,
    packer_name: String,
    anti_analysis_detected: Boolean,
    obfuscation_detected: Boolean,
  },
  dynamic_analysis: {
    execution_time: Number,
    processes_created: [{
      name: String,
      pid: Number,
      command_line: String,
    }],
    api_calls: [{
      api: String,
      count: Number,
      parameters: mongoose.Schema.Types.Mixed,
    }],
    network_activity: [{
      protocol: String,
      direction: String,
      source: String,
      destination: String,
      port: Number,
      data_size: Number,
    }],
    memory_dumps: [{
      process_name: String,
      size: Number,
      location: String,
    }],
  },
  behavioral_analysis: {
    file_operations: [{
      operation: String,
      path: String,
      timestamp: Date,
    }],
    registry_operations: [{
      operation: String,
      key: String,
      value: String,
      timestamp: Date,
    }],
    dropped_files: [{
      file_name: String,
      path: String,
      hash: String,
      size: Number,
    }],
    mutexes_created: [String],
    screenshots: [String],
    timeline: mongoose.Schema.Types.Mixed,
  },
  iocs: [{
    type: {
      type: String,
      enum: ['ip', 'domain', 'url', 'hash', 'email', 'filename', 'registry', 'mutex', 'cryptocurrency'],
    },
    value: String,
    context: String,
    confidence: Number,
  }],
  yara_matches: [{
    rule_name: String,
    namespace: String,
    tags: [String],
    meta: mongoose.Schema.Types.Mixed,
  }],
  sandbox_execution: {
    environment_id: String,
    started_at: Date,
    completed_at: Date,
    duration: Number,
    status: String,
  },
  analysis_results: mongoose.Schema.Types.Mixed,
  tags: [{
    type: String,
    trim: true,
  }],
  notes: String,
  metadata: mongoose.Schema.Types.Mixed,
}, {
  timestamps: {
    createdAt: 'created_at',
    updatedAt: 'updated_at',
  },
});

// Indexes for performance
MalwareSampleSchema.index({ file_name: 'text' });
MalwareSampleSchema.index({ created_at: -1 });
MalwareSampleSchema.index({ updated_at: -1 });
MalwareSampleSchema.index({ submitted_by: 1 });

// Virtual for analysis completion status
MalwareSampleSchema.virtual('is_analyzed').get(function () {
  return this.status === 'completed';
});

// Virtual for age calculation
MalwareSampleSchema.virtual('age_days').get(function () {
  return Math.floor((Date.now() - this.submitted_at) / (1000 * 60 * 60 * 24));
});

module.exports = mongoose.model('MalwareSample', MalwareSampleSchema);
