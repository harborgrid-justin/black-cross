/**
 * Sandbox Environment Data Model
 */

const mongoose = require('mongoose');
const { v4: uuidv4 } = require('uuid');

const SandboxEnvironmentSchema = new mongoose.Schema({
  id: {
    type: String,
    default: uuidv4,
    unique: true,
    index: true,
  },
  name: {
    type: String,
    required: true,
    trim: true,
    unique: true,
  },
  description: String,
  os_type: {
    type: String,
    required: true,
    enum: ['windows', 'linux', 'macos'],
    index: true,
  },
  os_version: {
    type: String,
    required: true,
  },
  architecture: {
    type: String,
    enum: ['x86', 'x64', 'arm', 'arm64'],
    default: 'x64',
  },
  status: {
    type: String,
    enum: ['active', 'inactive', 'maintenance', 'error'],
    default: 'active',
    index: true,
  },
  vm_config: {
    cpu_cores: Number,
    memory_mb: Number,
    disk_gb: Number,
    network_enabled: Boolean,
    network_mode: {
      type: String,
      enum: ['isolated', 'simulated', 'real'],
      default: 'simulated',
    },
  },
  installed_software: [{
    name: String,
    version: String,
    type: String,
  }],
  snapshot_id: String,
  template: Boolean,
  resource_usage: {
    cpu_percent: Number,
    memory_percent: Number,
    disk_percent: Number,
    last_updated: Date,
  },
  execution_count: {
    type: Number,
    default: 0,
  },
  last_used: Date,
  created_by: String,
  tags: [String],
  metadata: mongoose.Schema.Types.Mixed,
}, {
  timestamps: {
    createdAt: 'created_at',
    updatedAt: 'updated_at',
  },
});

// Indexes
SandboxEnvironmentSchema.index({ name: 'text', description: 'text' });
SandboxEnvironmentSchema.index({ created_at: -1 });

// Virtual for availability
SandboxEnvironmentSchema.virtual('is_available').get(function () {
  return this.status === 'active';
});

module.exports = mongoose.model('SandboxEnvironment', SandboxEnvironmentSchema);
