/**
 * YARA Rule Data Model
 */

const mongoose = require('mongoose');
const { v4: uuidv4 } = require('uuid');

const YaraRuleSchema = new mongoose.Schema({
  id: {
    type: String,
    default: uuidv4,
    unique: true,
    index: true,
  },
  rule_name: {
    type: String,
    required: true,
    unique: true,
    trim: true,
    index: true,
  },
  namespace: {
    type: String,
    default: 'default',
  },
  tags: [String],
  meta: {
    author: String,
    description: String,
    reference: String,
    date: Date,
    version: String,
    malware_family: String,
    severity: String,
  },
  rule_content: {
    type: String,
    required: true,
  },
  strings_section: [{
    identifier: String,
    type: {
      type: String,
      enum: ['text', 'hex', 'regex'],
    },
    value: String,
    modifiers: [String],
  }],
  condition: {
    type: String,
    required: true,
  },
  generated_from_sample: String,
  match_count: {
    type: Number,
    default: 0,
  },
  false_positive_rate: Number,
  tested: {
    type: Boolean,
    default: false,
  },
  test_results: {
    true_positives: Number,
    false_positives: Number,
    true_negatives: Number,
    false_negatives: Number,
  },
  status: {
    type: String,
    enum: ['draft', 'active', 'deprecated', 'archived'],
    default: 'draft',
    index: true,
  },
  version_history: [{
    version: String,
    rule_content: String,
    updated_at: Date,
    updated_by: String,
    change_notes: String,
  }],
  created_by: String,
  shared: {
    type: Boolean,
    default: false,
  },
  community_rating: Number,
  metadata: mongoose.Schema.Types.Mixed,
}, {
  timestamps: {
    createdAt: 'created_at',
    updatedAt: 'updated_at',
  },
});

// Indexes
YaraRuleSchema.index({ rule_name: 'text' });
YaraRuleSchema.index({ 'meta.malware_family': 1 });
YaraRuleSchema.index({ created_at: -1 });
YaraRuleSchema.index({ match_count: -1 });

// Virtual for accuracy
YaraRuleSchema.virtual('accuracy').get(function () {
  if (!this.test_results) return null;
  const total = this.test_results.true_positives + this.test_results.false_positives
    + this.test_results.true_negatives + this.test_results.false_negatives;
  if (total === 0) return null;
  return ((this.test_results.true_positives + this.test_results.true_negatives) / total) * 100;
});

module.exports = mongoose.model('YaraRule', YaraRuleSchema);
