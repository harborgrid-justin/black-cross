/**
 * Input Validation Schemas for Sandbox Management
 */

const Joi = require('joi');

// Create environment schema
const createEnvironmentSchema = Joi.object({
  name: Joi.string().required().trim().max(100),
  description: Joi.string().optional().trim().max(500),
  os_type: Joi.string().required().valid('windows', 'linux', 'macos'),
  os_version: Joi.string().required().trim(),
  architecture: Joi.string().valid('x86', 'x64', 'arm', 'arm64').optional(),
  vm_config: Joi.object({
    cpu_cores: Joi.number().integer().min(1).max(32)
      .optional(),
    memory_mb: Joi.number().integer().min(512).max(65536)
      .optional(),
    disk_gb: Joi.number().integer().min(10).max(1000)
      .optional(),
    network_enabled: Joi.boolean().optional(),
    network_mode: Joi.string().valid('isolated', 'simulated', 'real').optional(),
  }).optional(),
  installed_software: Joi.array().items(
    Joi.object({
      name: Joi.string().required(),
      version: Joi.string().optional(),
      type: Joi.string().optional(),
    }),
  ).optional(),
  template: Joi.boolean().optional(),
  created_by: Joi.string().optional().trim(),
  tags: Joi.array().items(Joi.string()).optional(),
});

// Update environment schema
const updateEnvironmentSchema = Joi.object({
  name: Joi.string().optional().trim().max(100),
  description: Joi.string().optional().trim().max(500),
  status: Joi.string().valid('active', 'inactive', 'maintenance', 'error').optional(),
  vm_config: Joi.object({
    cpu_cores: Joi.number().integer().min(1).max(32)
      .optional(),
    memory_mb: Joi.number().integer().min(512).max(65536)
      .optional(),
    disk_gb: Joi.number().integer().min(10).max(1000)
      .optional(),
    network_enabled: Joi.boolean().optional(),
    network_mode: Joi.string().valid('isolated', 'simulated', 'real').optional(),
  }).optional(),
  tags: Joi.array().items(Joi.string()).optional(),
});

// Environment filter schema
const environmentFilterSchema = Joi.object({
  os_type: Joi.string().valid('windows', 'linux', 'macos').optional(),
  status: Joi.string().valid('active', 'inactive', 'maintenance', 'error').optional(),
  template: Joi.boolean().optional(),
  page: Joi.number().integer().min(1).optional(),
  limit: Joi.number().integer().min(1).max(100)
    .optional(),
});

// Resource usage schema
const resourceUsageSchema = Joi.object({
  cpu_percent: Joi.number().min(0).max(100).required(),
  memory_percent: Joi.number().min(0).max(100).required(),
  disk_percent: Joi.number().min(0).max(100).required(),
});

module.exports = {
  createEnvironmentSchema,
  updateEnvironmentSchema,
  environmentFilterSchema,
  resourceUsageSchema,
};
