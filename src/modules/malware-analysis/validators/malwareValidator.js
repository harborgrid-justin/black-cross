/**
 * Input Validation Schemas for Malware Analysis
 */

const Joi = require('joi');

// Submit malware schema
const submitSchema = Joi.object({
  file_name: Joi.string().required().trim().max(255),
  file_type: Joi.string().optional().trim(),
  submitted_by: Joi.string().optional().trim(),
  priority: Joi.string().valid('low', 'medium', 'high', 'critical').optional(),
  tags: Joi.array().items(Joi.string()).optional(),
  notes: Joi.string().optional().max(1000),
});

// Filter schema
const filterSchema = Joi.object({
  status: Joi.string()
    .valid('pending', 'queued', 'analyzing', 'completed', 'failed', 'error')
    .optional(),
  priority: Joi.string()
    .valid('low', 'medium', 'high', 'critical')
    .optional(),
  submitted_by: Joi.string()
    .optional(),
  classification: Joi.string()
    .valid(
      'trojan',
      'ransomware',
      'worm',
      'virus',
      'backdoor',
      'rootkit',
      'spyware',
      'adware',
      'other',
      'unknown',
    )
    .optional(),
  malware_family: Joi.string()
    .optional(),
  page: Joi.number().integer().min(1)
    .optional(),
  limit: Joi.number().integer().min(1).max(100)
    .optional(),
});

// Classification schema
const classificationSchema = Joi.object({
  family: Joi.string().required().trim(),
  type: Joi.string()
    .valid(
      'trojan',
      'ransomware',
      'worm',
      'virus',
      'backdoor',
      'rootkit',
      'spyware',
      'adware',
      'other',
      'unknown',
    )
    .required(),
  threat_level: Joi.string()
    .valid('critical', 'high', 'medium', 'low', 'info')
    .required(),
});

// IOC filter schema
const iocFilterSchema = Joi.object({
  type: Joi.string()
    .valid(
      'ip',
      'domain',
      'url',
      'hash',
      'email',
      'filename',
      'registry',
      'mutex',
      'cryptocurrency',
    )
    .optional(),
  min_confidence: Joi.number().min(0).max(100)
    .optional(),
});

// YARA rule generation schema
const yaraGenerationSchema = Joi.object({
  rule_name: Joi.string().optional().trim().pattern(/^[a-zA-Z_][a-zA-Z0-9_]*$/),
  namespace: Joi.string().optional().trim(),
  author: Joi.string().optional().trim(),
  description: Joi.string().optional().trim().max(500),
  max_strings: Joi.number().integer().min(1).max(100)
    .optional(),
  min_length: Joi.number().integer().min(4).max(50)
    .optional(),
  threshold: Joi.number().integer().min(1).optional(),
  created_by: Joi.string().optional().trim(),
});

module.exports = {
  submitSchema,
  filterSchema,
  classificationSchema,
  iocFilterSchema,
  yaraGenerationSchema,
};
