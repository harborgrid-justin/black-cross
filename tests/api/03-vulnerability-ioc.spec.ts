/**
 * API Tests - Group 3: Vulnerability Management & IOC Management
 * Tests vulnerability scanning and IOC tracking endpoints
 */

import { test, expect } from '@playwright/test';
import { ApiHelper, TestDataGenerator } from './utils/api-helper';

test.describe('Vulnerability Management & IOC Management APIs', () => {
  let apiHelper: ApiHelper;

  test.beforeAll(async () => {
    apiHelper = new ApiHelper('http://localhost:8080');
  });

  test.describe('Vulnerability Management Endpoints', () => {
    test('should access vulnerability management list endpoint', async ({ request }) => {
      const response = await apiHelper.get(request, '/api/v1/vulnerability-management');
      
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(500);
      
      if (response.status === 200) {
        expect(response.data).toBeDefined();
      }
    });

    test('should access vulnerability stats endpoint', async ({ request }) => {
      const response = await apiHelper.get(request, '/api/v1/vulnerability-management/stats');
      
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(500);
    });

    test('should handle vulnerability scan endpoint', async ({ request }) => {
      const response = await apiHelper.post(request, '/api/v1/vulnerability-management/scan', {
        target: 'test-target',
      });
      
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(600);
    });

    test('should handle vulnerability export endpoint', async ({ request }) => {
      const response = await apiHelper.get(request, '/api/v1/vulnerability-management/export');
      
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(500);
    });
  });

  test.describe('IOC Management Endpoints', () => {
    test('should access IOC management list endpoint', async ({ request }) => {
      const response = await apiHelper.get(request, '/api/v1/ioc-management');
      
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(500);
      
      if (response.status === 200) {
        expect(response.data).toBeDefined();
      }
    });

    test('should access IOC search endpoint', async ({ request }) => {
      const response = await apiHelper.get(request, '/api/v1/ioc-management/search?q=test');
      
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(500);
    });

    test('should handle IOC check endpoint', async ({ request }) => {
      const response = await apiHelper.post(request, '/api/v1/ioc-management/check', {
        indicator: '192.168.1.1',
      });
      
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(600);
    });

    test('should handle IOC bulk import endpoint', async ({ request }) => {
      const response = await apiHelper.post(request, '/api/v1/ioc-management/bulk-import', {
        iocs: [TestDataGenerator.ioc()],
      });
      
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(600);
    });

    test('should handle GET specific IOC endpoint', async ({ request }) => {
      const response = await apiHelper.get(request, '/api/v1/ioc-management/test-id');
      
      // Endpoint should exist (404 for non-existent ID is okay)
      expect(response.status).toBeGreaterThanOrEqual(200);
      expect(response.status).toBeLessThan(500);
    });
  });

  test.describe('Vulnerability-IOC Integration', () => {
    test('should verify both modules can be queried together', async ({ request }) => {
      const vulnResponse = await apiHelper.get(request, '/api/v1/vulnerability-management');
      const iocResponse = await apiHelper.get(request, '/api/v1/ioc-management');
      
      // Both should be accessible
      expect(vulnResponse.status).toBeGreaterThanOrEqual(200);
      expect(iocResponse.status).toBeGreaterThanOrEqual(200);
      
      // Both should return JSON data
      expect(vulnResponse.data).toBeDefined();
      expect(iocResponse.data).toBeDefined();
    });
  });
});
