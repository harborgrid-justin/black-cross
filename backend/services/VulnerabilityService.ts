/**
 * Vulnerability Service
 * Production-grade service using Sequelize repository pattern
 * This demonstrates the proper CRUD implementation for PostgreSQL
 */

import { vulnerabilityRepository } from '../repositories';
import type { Vulnerability, ListFilters, PaginatedResponse } from '../repositories';

export class VulnerabilityService {
  /**
   * Create a new vulnerability
   */
  async create(data: {
    cveId?: string;
    title: string;
    description?: string;
    severity: string;
    cvssScore?: number;
    affectedSystems: string[];
    status?: string;
    publishedAt?: Date;
    discoveredAt: Date;
    patchedAt?: Date;
  }): Promise<Vulnerability> {
    // Set default status if not provided
    if (!data.status) {
      data.status = 'open';
    }

    return await vulnerabilityRepository.create(data);
  }

  /**
   * Get vulnerability by ID
   */
  async getById(id: string): Promise<Vulnerability> {
    return await vulnerabilityRepository.findByIdOrThrow(id);
  }

  /**
   * Get vulnerability by CVE ID
   */
  async getByCveId(cveId: string): Promise<Vulnerability | null> {
    return await vulnerabilityRepository.findByCveId(cveId);
  }

  /**
   * List vulnerabilities with pagination and filters
   */
  async list(filters: ListFilters = {}): Promise<PaginatedResponse<Vulnerability>> {
    return await vulnerabilityRepository.list(filters);
  }

  /**
   * List all vulnerabilities by severity
   */
  async listBySeverity(severity: string): Promise<Vulnerability[]> {
    return await vulnerabilityRepository.findBySeverity(severity);
  }

  /**
   * List all vulnerabilities by status
   */
  async listByStatus(status: string): Promise<Vulnerability[]> {
    return await vulnerabilityRepository.findByStatus(status);
  }

  /**
   * List open vulnerabilities
   */
  async listOpen(): Promise<Vulnerability[]> {
    return await vulnerabilityRepository.findOpen();
  }

  /**
   * List critical vulnerabilities
   */
  async listCritical(): Promise<Vulnerability[]> {
    return await vulnerabilityRepository.findCritical();
  }

  /**
   * List vulnerabilities by affected system
   */
  async listByAffectedSystem(systemId: string): Promise<Vulnerability[]> {
    return await vulnerabilityRepository.findByAffectedSystem(systemId);
  }

  /**
   * Update vulnerability
   */
  async update(id: string, updates: Partial<Vulnerability>): Promise<Vulnerability> {
    return await vulnerabilityRepository.update(id, updates);
  }

  /**
   * Update vulnerability status
   */
  async updateStatus(id: string, status: string): Promise<Vulnerability> {
    return await vulnerabilityRepository.updateStatus(id, status);
  }

  /**
   * Delete vulnerability
   */
  async delete(id: string): Promise<void> {
    return await vulnerabilityRepository.delete(id);
  }

  /**
   * Get vulnerability statistics
   */
  async getStatistics(): Promise<{
    total: number;
    open: number;
    patched: number;
    critical: number;
    high: number;
    medium: number;
    low: number;
  }> {
    return await vulnerabilityRepository.getStatistics();
  }

  /**
   * Check if vulnerability exists
   */
  async exists(id: string): Promise<boolean> {
    return await vulnerabilityRepository.exists(id);
  }

  /**
   * Patch a vulnerability
   */
  async patch(id: string): Promise<Vulnerability> {
    return await this.updateStatus(id, 'patched');
  }

  /**
   * Mitigate a vulnerability
   */
  async mitigate(id: string): Promise<Vulnerability> {
    return await this.updateStatus(id, 'mitigated');
  }
}

// Export singleton instance
export const vulnerabilityService = new VulnerabilityService();
export default vulnerabilityService;
