import type { Router } from 'express';
import express from 'express';
import vulnerabilityController from '../controllers/vulnerabilityController';
import { validate, commonSchemas, Joi } from '../../../middleware/validator';
import validatorSchemas from '../validators/vulnerabilityValidator';

const { vulnerabilitySchema, vulnerabilityUpdateSchema } = validatorSchemas;

const router: Router = express.Router();

// Base CRUD routes
router.post('/', validate({ body: vulnerabilitySchema }), vulnerabilityController.create);
router.get('/', vulnerabilityController.list);
router.get('/:id', validate({ params: Joi.object({ id: commonSchemas.objectId.required() }) }), vulnerabilityController.getById);
router.put('/:id', validate({
  params: Joi.object({ id: commonSchemas.objectId.required() }),
  body: vulnerabilityUpdateSchema,
}), vulnerabilityController.update);
router.delete('/:id', validate({ params: Joi.object({ id: commonSchemas.objectId.required() }) }), vulnerabilityController.delete);

// Additional vulnerability operations
router.patch('/:id/status', validate({ params: Joi.object({ id: commonSchemas.objectId.required() }) }), vulnerabilityController.updateStatus);
router.post('/scan', vulnerabilityController.runScan);
router.get('/scans/:scanId', validate({ params: Joi.object({ scanId: commonSchemas.objectId.required() }) }), vulnerabilityController.getScanResults);

export default router;
