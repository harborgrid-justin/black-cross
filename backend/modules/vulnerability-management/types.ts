/**
 * Vulnerability Management Type Definitions
 * Comprehensive types for vulnerability tracking and remediation
 */

/**
 * Vulnerability severity levels (CVSS-based)
 */
export type VulnerabilitySeverity =
  | 'critical' // CVSS 9.0-10.0
  | 'high'     // CVSS 7.0-8.9
  | 'medium'   // CVSS 4.0-6.9
  | 'low'      // CVSS 0.1-3.9
  | 'none';    // CVSS 0.0

/**
 * Vulnerability status
 */
export type VulnerabilityStatus =
  | 'open'
  | 'in_progress'
  | 'patched'
  | 'mitigated'
  | 'accepted'
  | 'false_positive'
  | 'closed';

/**
 * Patch status
 */
export type PatchStatus =
  | 'available'
  | 'pending_approval'
  | 'approved'
  | 'scheduled'
  | 'deployed'
  | 'verified'
  | 'failed'
  | 'rolled_back';

/**
 * Remediation priority
 */
export type RemediationPriority =
  | 'immediate'
  | 'high'
  | 'medium'
  | 'low'
  | 'deferred';

/**
 * Scanner type
 */
export type ScannerType =
  | 'nessus'
  | 'qualys'
  | 'openvas'
  | 'nexpose'
  | 'custom';

/**
 * CVSS metrics
 */
export interface CvssMetrics {
  readonly version: '2.0' | '3.0' | '3.1';
  readonly baseScore: number;
  readonly temporalScore?: number;
  readonly environmentalScore?: number;
  readonly vector: string;
  readonly attackVector?: 'network' | 'adjacent' | 'local' | 'physical';
  readonly attackComplexity?: 'low' | 'high';
  readonly privilegesRequired?: 'none' | 'low' | 'high';
  readonly userInteraction?: 'none' | 'required';
  readonly scope?: 'unchanged' | 'changed';
  readonly confidentialityImpact?: 'none' | 'low' | 'high';
  readonly integrityImpact?: 'none' | 'low' | 'high';
  readonly availabilityImpact?: 'none' | 'low' | 'high';
}

/**
 * CVE (Common Vulnerabilities and Exposures) data
 */
export interface CveData {
  readonly cveId: string;
  readonly description: string;
  readonly publishedDate: Date;
  readonly lastModifiedDate: Date;
  readonly cvss: CvssMetrics;
  readonly severity: VulnerabilitySeverity;
  readonly cwe: readonly string[]; // Common Weakness Enumeration
  readonly references: readonly string[];
  readonly exploitAvailable: boolean;
  readonly exploitabilityScore?: number;
  readonly impactScore?: number;
}

/**
 * Asset information
 */
export interface Asset {
  readonly id: string;
  readonly name: string;
  readonly type: 'server' | 'workstation' | 'network_device' | 'application' | 'database' | 'cloud' | 'other';
  readonly ipAddress?: string;
  readonly hostname?: string;
  readonly operatingSystem?: string;
  readonly osVersion?: string;
  readonly location?: string;
  readonly owner?: string;
  readonly businessCriticality: 'critical' | 'high' | 'medium' | 'low';
  readonly exposureLevel: 'internet_facing' | 'dmz' | 'internal' | 'isolated';
  readonly tags: readonly string[];
  readonly metadata: Record<string, any>;
}

/**
 * Vulnerability data structure
 */
export interface Vulnerability {
  readonly id: string;
  readonly title: string;
  readonly description: string;
  readonly cveId?: string;
  readonly cve?: CveData;
  readonly severity: VulnerabilitySeverity;
  readonly cvssScore: number;
  readonly status: VulnerabilityStatus;
  readonly affectedAssets: readonly string[]; // Asset IDs
  readonly scanner: ScannerType;
  readonly firstDetected: Date;
  readonly lastDetected: Date;
  readonly plugin?: string;
  readonly port?: number;
  readonly protocol?: string;
  readonly solution?: string;
  readonly references: readonly string[];
  readonly exploitAvailable: boolean;
  readonly patchAvailable: boolean;
  readonly tags: readonly string[];
  readonly metadata: Record<string, any>;
  readonly createdAt: Date;
  readonly updatedAt: Date;
}

/**
 * Scan result from external scanner
 */
export interface ScanResult {
  readonly scanId: string;
  readonly scanner: ScannerType;
  readonly scanDate: Date;
  readonly targetAssets: readonly string[];
  readonly vulnerabilities: readonly {
    readonly plugin: string;
    readonly title: string;
    readonly description: string;
    readonly severity: VulnerabilitySeverity;
    readonly cvssScore: number;
    readonly cveId?: string;
    readonly solution?: string;
    readonly port?: number;
    readonly protocol?: string;
    readonly affectedAsset: string;
  }[];
  readonly scanDuration: number; // seconds
  readonly totalFindings: number;
  readonly criticalCount: number;
  readonly highCount: number;
  readonly mediumCount: number;
  readonly lowCount: number;
}

/**
 * Asset vulnerability mapping
 */
export interface AssetVulnerabilityMap {
  readonly assetId: string;
  readonly asset: Asset;
  readonly vulnerabilities: readonly Vulnerability[];
  readonly totalVulnerabilities: number;
  readonly criticalCount: number;
  readonly highCount: number;
  readonly mediumCount: number;
  readonly lowCount: number;
  readonly riskScore: number;
  readonly lastScanned?: Date;
}

/**
 * Patch information
 */
export interface Patch {
  readonly id: string;
  readonly name: string;
  readonly description: string;
  readonly vendor: string;
  readonly version: string;
  readonly releaseDate: Date;
  readonly vulnerabilities: readonly string[]; // Vulnerability IDs
  readonly affectedAssets: readonly string[];
  readonly status: PatchStatus;
  readonly approvedBy?: string;
  readonly approvedAt?: Date;
  readonly scheduledFor?: Date;
  readonly deployedAt?: Date;
  readonly deployedBy?: string;
  readonly verifiedAt?: Date;
  readonly rollbackPlan?: string;
  readonly notes?: string;
  readonly metadata: Record<string, any>;
}

/**
 * Risk calculation factors
 */
export interface RiskFactors {
  readonly cvssScore: number;
  readonly exploitAvailable: boolean;
  readonly assetCriticality: 'critical' | 'high' | 'medium' | 'low';
  readonly exposureLevel: 'internet_facing' | 'dmz' | 'internal' | 'isolated';
  readonly ageInDays: number;
  readonly dataValue: number; // 0-100
  readonly patchAvailable: boolean;
}

/**
 * Risk score result
 */
export interface RiskScore {
  readonly vulnerabilityId: string;
  readonly score: number; // 0-100
  readonly priority: RemediationPriority;
  readonly factors: RiskFactors;
  readonly calculatedAt: Date;
}

/**
 * Remediation task
 */
export interface RemediationTask {
  readonly id: string;
  readonly vulnerabilityId: string;
  readonly title: string;
  readonly description: string;
  readonly priority: RemediationPriority;
  readonly assignedTo?: string;
  readonly dueDate?: Date;
  readonly status: 'pending' | 'in_progress' | 'completed' | 'verified' | 'failed';
  readonly createdAt: Date;
  readonly startedAt?: Date;
  readonly completedAt?: Date;
  readonly verifiedAt?: Date;
  readonly verifiedBy?: string;
  readonly notes?: string;
  readonly steps: readonly string[];
}

/**
 * Vulnerability trend data
 */
export interface VulnerabilityTrend {
  readonly period: {
    readonly start: Date;
    readonly end: Date;
  };
  readonly dataPoints: readonly {
    readonly date: Date;
    readonly total: number;
    readonly critical: number;
    readonly high: number;
    readonly medium: number;
    readonly low: number;
    readonly open: number;
    readonly closed: number;
  }[];
  readonly metrics: {
    readonly averageAge: number; // days
    readonly meanTimeToRemediate: number; // days
    readonly newVulnerabilities: number;
    readonly closedVulnerabilities: number;
    readonly netChange: number;
  };
}

/**
 * SLA (Service Level Agreement) configuration
 */
export interface SlaConfig {
  readonly critical: number; // days
  readonly high: number;
  readonly medium: number;
  readonly low: number;
}

/**
 * SLA status
 */
export interface SlaStatus {
  readonly vulnerabilityId: string;
  readonly severity: VulnerabilitySeverity;
  readonly deadline: Date;
  readonly daysRemaining: number;
  readonly breached: boolean;
  readonly progress: number; // 0-100
}

/**
 * Verification test
 */
export interface VerificationTest {
  readonly id: string;
  readonly vulnerabilityId: string;
  readonly testType: 'scan' | 'manual' | 'exploit_test' | 'configuration_review';
  readonly description: string;
  readonly performedAt: Date;
  readonly performedBy: string;
  readonly result: 'passed' | 'failed' | 'inconclusive';
  readonly evidence?: string;
  readonly notes?: string;
}

/**
 * Import result
 */
export interface ImportResult {
  readonly total: number;
  readonly imported: number;
  readonly updated: number;
  readonly skipped: number;
  readonly failed: number;
  readonly errors: readonly {
    readonly line?: number;
    readonly error: string;
    readonly data?: any;
  }[];
}

/**
 * Search filters
 */
export interface VulnerabilitySearchQuery {
  readonly text?: string;
  readonly severity?: readonly VulnerabilitySeverity[];
  readonly status?: readonly VulnerabilityStatus[];
  readonly cveId?: string;
  readonly assetId?: string;
  readonly tags?: readonly string[];
  readonly exploitAvailable?: boolean;
  readonly patchAvailable?: boolean;
  readonly dateRange?: {
    readonly start: Date;
    readonly end: Date;
    readonly field: 'firstDetected' | 'lastDetected' | 'createdAt';
  };
  readonly cvssRange?: {
    readonly min: number;
    readonly max: number;
  };
  readonly limit?: number;
  readonly offset?: number;
  readonly sortBy?: string;
  readonly sortOrder?: 'asc' | 'desc';
}

/**
 * Statistics
 */
export interface VulnerabilityStatistics {
  readonly total: number;
  readonly bySeverity: {
    readonly critical: number;
    readonly high: number;
    readonly medium: number;
    readonly low: number;
    readonly none: number;
  };
  readonly byStatus: Record<VulnerabilityStatus, number>;
  readonly withExploits: number;
  readonly withPatches: number;
  readonly averageAge: number; // days
  readonly oldestVulnerability?: {
    readonly id: string;
    readonly title: string;
    readonly ageInDays: number;
  };
  readonly mostCriticalAsset?: {
    readonly id: string;
    readonly name: string;
    readonly vulnerabilityCount: number;
    readonly riskScore: number;
  };
}

/**
 * Type guards
 */
export function isValidSeverity(severity: string): severity is VulnerabilitySeverity {
  return ['critical', 'high', 'medium', 'low', 'none'].includes(severity);
}

export function isValidStatus(status: string): status is VulnerabilityStatus {
  return ['open', 'in_progress', 'patched', 'mitigated', 'accepted', 'false_positive', 'closed'].includes(status);
}

export function isError(error: unknown): error is Error {
  return error instanceof Error;
}
