import vulnerabilityService from '../services/vulnerabilityService';

class VulnerabilityController {
  async create(req, res) {
    try {
      const item = await vulnerabilityService.create(req.body);
      res.status(201).json(item);
    } catch (error) {
      res.status(400).json({ error: error.message });
    }
  }

  async getById(req, res) {
    try {
      const item = await vulnerabilityService.getById(req.params.id);
      res.json(item);
    } catch (error) {
      res.status(404).json({ error: error.message });
    }
  }

  async list(req, res) {
    try {
      const items = await vulnerabilityService.list(req.query);
      res.json(items);
    } catch (error) {
      res.status(400).json({ error: error.message });
    }
  }

  async update(req, res) {
    try {
      const item = await vulnerabilityService.update(req.params.id, req.body);
      res.json(item);
    } catch (error) {
      res.status(400).json({ error: error.message });
    }
  }

  async delete(req, res) {
    try {
      const result = await vulnerabilityService.delete(req.params.id);
      res.json(result);
    } catch (error) {
      res.status(400).json({ error: error.message });
    }
  }

  async updateStatus(req, res) {
    try {
      const { status } = req.body;
      const item = await vulnerabilityService.update(req.params.id, { status });
      res.json({ success: true, data: item });
    } catch (error) {
      res.status(400).json({ success: false, error: error.message });
    }
  }

  async runScan(req, res) {
    try {
      const { targets } = req.body;
      const result = await vulnerabilityService.initiateScan(targets);
      res.json({ success: true, data: result });
    } catch (error) {
      res.status(400).json({ success: false, error: error.message });
    }
  }

  async getScanResults(req, res) {
    try {
      const result = await vulnerabilityService.getScanDetails(req.params.scanId);
      res.json({ success: true, data: result });
    } catch (error) {
      res.status(404).json({ success: false, error: error.message });
    }
  }
}

export default new VulnerabilityController();

