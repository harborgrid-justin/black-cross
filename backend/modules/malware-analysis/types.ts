/**
 * Type definitions for Malware Analysis Module
 * Supports all 7 production-ready features
 */

// ========================================
// Enums and Constants
// ========================================

export type AnalysisType = 'static' | 'dynamic' | 'behavioral' | 'hybrid';
export type AnalysisStatus = 'queued' | 'analyzing' | 'completed' | 'failed' | 'timeout';
export type MalwareType = 'virus' | 'worm' | 'trojan' | 'ransomware' | 'spyware' | 'adware' | 'rootkit' | 'bot' | 'exploit' | 'pua' | 'unknown';
export type ThreatLevel = 'critical' | 'high' | 'medium' | 'low' | 'informational';
export type SandboxStatus = 'available' | 'busy' | 'maintenance' | 'offline';
export type SandboxEnvironment = 'windows_10' | 'windows_11' | 'windows_7' | 'linux' | 'macos';
export type FileType = 'pe' | 'elf' | 'macho' | 'pdf' | 'office' | 'script' | 'archive' | 'android_apk' | 'ios_app' | 'unknown';

// ========================================
// Core Interfaces
// ========================================

export interface MalwareSample {
  id: string;
  fileName: string;
  fileSize: number;
  fileType: FileType;
  md5: string;
  sha1: string;
  sha256: string;
  sha512?: string;
  ssdeep?: string; // Fuzzy hash
  uploadedAt: Date;
  uploadedBy: string;
  source?: string;
  threatLevel: ThreatLevel;
  malwareType?: MalwareType;
  malwareFamily?: string;
  tags: string[];
  status: AnalysisStatus;
  staticAnalysis?: StaticAnalysisResult;
  dynamicAnalysis?: DynamicAnalysisResult;
  behavioralAnalysis?: BehavioralAnalysisReport;
  extractedIocs?: ExtractedIOCs;
  yaraMatches?: YaraMatch[];
  metadata: Record<string, any>;
  createdAt: Date;
  updatedAt: Date;
}

// ========================================
// Automated Malware Submission
// ========================================

export interface SubmissionRequest {
  fileName: string;
  fileData: Buffer | string; // Base64 encoded or buffer
  source?: string;
  submittedBy: string;
  priority: 'urgent' | 'high' | 'normal' | 'low';
  analysisTypes: AnalysisType[];
  sandboxEnvironments?: SandboxEnvironment[];
  timeout?: number; // seconds
  tags?: string[];
  metadata?: Record<string, any>;
}

export interface SubmissionResponse {
  sampleId: string;
  submissionId: string;
  hashes: {
    md5: string;
    sha1: string;
    sha256: string;
  };
  status: AnalysisStatus;
  estimatedCompletionTime: Date;
  queuePosition: number;
}

export interface SubmissionQueue {
  queueLength: number;
  averageWaitTime: number;
  samples: Array<{
    sampleId: string;
    fileName: string;
    priority: string;
    queuedAt: Date;
    position: number;
  }>;
}

// ========================================
// Static Analysis
// ========================================

export interface StaticAnalysisResult {
  analysisId: string;
  sampleId: string;
  completedAt: Date;
  fileInfo: FileInformation;
  peInfo?: PEInformation;
  strings: ExtractedStrings;
  entropy: EntropyAnalysis;
  signatures: SignatureInfo;
  resources?: ResourceInfo[];
  imports?: ImportedFunctions[];
  exports?: ExportedFunctions[];
  sections?: SectionInfo[];
  capabilities: DetectedCapabilities;
  packers?: PackerDetection[];
  obfuscation?: ObfuscationAnalysis;
  threats: ThreatIndicators;
}

export interface FileInformation {
  fileName: string;
  fileType: FileType;
  fileSize: number;
  mimeType: string;
  magicBytes: string;
  compilerInfo?: string;
  creationTime?: Date;
  modificationTime?: Date;
}

export interface PEInformation {
  architecture: 'x86' | 'x64' | 'arm';
  entryPoint: string;
  imageBase: string;
  subsystem: string;
  compiler?: string;
  linkerVersion?: string;
  characteristics: string[];
  timestamp?: Date;
}

export interface ExtractedStrings {
  ascii: string[];
  unicode: string[];
  urls: string[];
  ips: string[];
  emails: string[];
  filePaths: string[];
  registryKeys: string[];
  suspiciousStrings: string[];
}

export interface EntropyAnalysis {
  overallEntropy: number;
  isPacked: boolean;
  highEntropySection: boolean;
  sectionEntropy: Array<{
    name: string;
    entropy: number;
    suspicious: boolean;
  }>;
}

export interface SignatureInfo {
  isSigned: boolean;
  isValid: boolean;
  signers?: string[];
  issuer?: string;
  validFrom?: Date;
  validTo?: Date;
  serialNumber?: string;
}

export interface ResourceInfo {
  type: string;
  name: string;
  language: string;
  size: number;
  entropy: number;
}

export interface ImportedFunctions {
  dll: string;
  functions: string[];
  suspicious: boolean;
}

export interface ExportedFunctions {
  name: string;
  ordinal: number;
  address: string;
}

export interface SectionInfo {
  name: string;
  virtualSize: number;
  rawSize: number;
  entropy: number;
  characteristics: string[];
  suspicious: boolean;
}

export interface DetectedCapabilities {
  capabilities: string[];
  categories: string[];
  techniques: string[];
  confidence: number;
}

export interface PackerDetection {
  name: string;
  version?: string;
  confidence: number;
}

export interface ObfuscationAnalysis {
  isObfuscated: boolean;
  techniques: string[];
  confidence: number;
}

export interface ThreatIndicators {
  isMalicious: boolean;
  confidence: number;
  indicators: string[];
  severity: ThreatLevel;
}

// ========================================
// Dynamic Analysis
// ========================================

export interface DynamicAnalysisResult {
  analysisId: string;
  sampleId: string;
  sandboxId: string;
  environment: SandboxEnvironment;
  startedAt: Date;
  completedAt: Date;
  duration: number;
  processTree: ProcessInfo[];
  fileActivity: FileActivity[];
  registryActivity: RegistryActivity[];
  networkActivity: NetworkActivity[];
  apiCalls: APICall[];
  memoryDumps?: MemoryDump[];
  screenshots?: Screenshot[];
  behaviorSummary: BehaviorSummary;
  artifacts: Artifacts;
}

export interface ProcessInfo {
  pid: number;
  name: string;
  commandLine: string;
  parentPid?: number;
  startTime: Date;
  endTime?: Date;
  children: ProcessInfo[];
  injectedCode: boolean;
  suspicious: boolean;
}

export interface FileActivity {
  timestamp: Date;
  pid: number;
  operation: 'create' | 'read' | 'write' | 'delete' | 'rename' | 'execute';
  path: string;
  hash?: string;
  suspicious: boolean;
}

export interface RegistryActivity {
  timestamp: Date;
  pid: number;
  operation: 'create' | 'read' | 'write' | 'delete';
  key: string;
  value?: string;
  data?: string;
  suspicious: boolean;
}

export interface NetworkActivity {
  timestamp: Date;
  pid: number;
  protocol: 'tcp' | 'udp' | 'http' | 'https' | 'dns' | 'icmp';
  sourceIp: string;
  sourcePort: number;
  destinationIp: string;
  destinationPort: number;
  domain?: string;
  url?: string;
  method?: string;
  userAgent?: string;
  payloadSize?: number;
  suspicious: boolean;
}

export interface APICall {
  timestamp: Date;
  pid: number;
  tid: number;
  api: string;
  module: string;
  parameters?: Record<string, any>;
  returnValue?: string;
  category: string;
  suspicious: boolean;
}

export interface MemoryDump {
  processId: number;
  processName: string;
  dumpTime: Date;
  size: number;
  path: string;
  hash: string;
}

export interface Screenshot {
  timestamp: Date;
  path: string;
  hash: string;
  description?: string;
}

export interface BehaviorSummary {
  totalProcesses: number;
  totalFileOperations: number;
  totalRegistryOperations: number;
  totalNetworkConnections: number;
  totalApiCalls: number;
  suspiciousActivities: string[];
  maliciousBehaviors: string[];
}

export interface Artifacts {
  droppedFiles: string[];
  createdMutexes: string[];
  createdServices: string[];
  modifiedFiles: string[];
  contactedDomains: string[];
  contactedIps: string[];
}

// ========================================
// Behavioral Analysis
// ========================================

export interface BehavioralAnalysisReport {
  analysisId: string;
  sampleId: string;
  analyzedAt: Date;
  behaviors: DetectedBehavior[];
  patterns: BehaviorPattern[];
  tactics: MitreTactic[];
  techniques: MitreTechnique[];
  riskScore: number;
  classification: BehaviorClassification;
  summary: string;
}

export interface DetectedBehavior {
  id: string;
  category: string;
  name: string;
  description: string;
  severity: ThreatLevel;
  confidence: number;
  evidence: Evidence[];
  mitigations: string[];
}

export interface BehaviorPattern {
  name: string;
  description: string;
  occurrences: number;
  indicators: string[];
  relatedBehaviors: string[];
}

export interface MitreTactic {
  id: string;
  name: string;
  description: string;
  techniques: string[];
}

export interface MitreTechnique {
  id: string;
  name: string;
  description: string;
  tactic: string;
  subtechniques?: string[];
}

export interface Evidence {
  type: 'process' | 'file' | 'registry' | 'network' | 'api_call';
  timestamp: Date;
  description: string;
  details: Record<string, any>;
}

export interface BehaviorClassification {
  primary: string;
  secondary: string[];
  malwareFamily?: string;
  confidence: number;
}

// ========================================
// Sandbox Management
// ========================================

export interface Sandbox {
  id: string;
  name: string;
  environment: SandboxEnvironment;
  status: SandboxStatus;
  capacity: number;
  currentLoad: number;
  configuration: SandboxConfiguration;
  stats: SandboxStatistics;
  lastHealthCheck: Date;
  createdAt: Date;
}

export interface SandboxConfiguration {
  os: string;
  osVersion: string;
  architecture: string;
  memory: number; // MB
  cpuCores: number;
  diskSpace: number; // GB
  networkEnabled: boolean;
  internetAccess: boolean;
  timeout: number; // seconds
  snapshot?: string;
  customTools?: string[];
}

export interface SandboxStatistics {
  totalAnalyses: number;
  successfulAnalyses: number;
  failedAnalyses: number;
  averageAnalysisTime: number;
  uptimePercentage: number;
  lastReset?: Date;
}

export interface SandboxAllocation {
  sandboxId: string;
  sampleId: string;
  allocatedAt: Date;
  estimatedDuration: number;
  priority: string;
}

export interface SandboxHealthCheck {
  sandboxId: string;
  status: 'healthy' | 'degraded' | 'unhealthy';
  checkedAt: Date;
  metrics: {
    cpuUsage: number;
    memoryUsage: number;
    diskUsage: number;
    networkLatency: number;
  };
  issues: string[];
  recommendations: string[];
}

// ========================================
// Malware Family Classification
// ========================================

export interface MalwareFamilyClassification {
  sampleId: string;
  family: string;
  variant?: string;
  confidence: number;
  classifiedAt: Date;
  classificationMethod: 'signature' | 'behavior' | 'ml' | 'yara' | 'manual';
  similarSamples: string[];
  characteristics: FamilyCharacteristics;
  attribution?: Attribution;
}

export interface FamilyCharacteristics {
  commonBehaviors: string[];
  typicalIOCs: string[];
  attackVectors: string[];
  targetedPlatforms: string[];
  capabilities: string[];
  evolutionStage?: string;
}

export interface Attribution {
  actor?: string;
  campaign?: string;
  motivation?: string;
  targetedSectors?: string[];
  targetedGeographies?: string[];
  confidence: number;
}

export interface ClassificationModel {
  id: string;
  name: string;
  version: string;
  algorithm: string;
  accuracy: number;
  trainedOn: Date;
  features: string[];
  supportedFamilies: string[];
}

// ========================================
// IOC Extraction
// ========================================

export interface ExtractedIOCs {
  sampleId: string;
  extractedAt: Date;
  ips: ExtractedIP[];
  domains: ExtractedDomain[];
  urls: ExtractedURL[];
  emails: ExtractedEmail[];
  hashes: ExtractedHash[];
  filePaths: ExtractedFilePath[];
  registryKeys: ExtractedRegistryKey[];
  mutexes: ExtractedMutex[];
  certificates: ExtractedCertificate[];
  cryptoWallets: ExtractedWallet[];
  totalIOCs: number;
}

export interface ExtractedIP {
  value: string;
  type: 'ipv4' | 'ipv6';
  source: 'static' | 'dynamic' | 'network';
  context: string;
  firstSeen: Date;
  occurrences: number;
  confidence: number;
  geoLocation?: {
    country: string;
    city?: string;
  };
}

export interface ExtractedDomain {
  value: string;
  source: 'static' | 'dynamic' | 'network';
  context: string;
  firstSeen: Date;
  occurrences: number;
  confidence: number;
  resolved?: string[];
  whois?: Record<string, any>;
}

export interface ExtractedURL {
  value: string;
  protocol: string;
  domain: string;
  path: string;
  source: 'static' | 'dynamic' | 'network';
  context: string;
  firstSeen: Date;
  occurrences: number;
  confidence: number;
}

export interface ExtractedEmail {
  value: string;
  source: 'static' | 'dynamic';
  context: string;
  confidence: number;
}

export interface ExtractedHash {
  value: string;
  algorithm: 'md5' | 'sha1' | 'sha256';
  source: 'static' | 'dynamic';
  context: string;
  confidence: number;
}

export interface ExtractedFilePath {
  value: string;
  source: 'static' | 'dynamic';
  context: string;
  fileExists?: boolean;
  confidence: number;
}

export interface ExtractedRegistryKey {
  value: string;
  hive: string;
  operation?: string;
  source: 'static' | 'dynamic';
  confidence: number;
}

export interface ExtractedMutex {
  value: string;
  source: 'dynamic';
  firstSeen: Date;
  confidence: number;
}

export interface ExtractedCertificate {
  subject: string;
  issuer: string;
  serialNumber: string;
  validFrom: Date;
  validTo: Date;
  thumbprint: string;
}

export interface ExtractedWallet {
  address: string;
  cryptocurrency: string;
  source: 'static' | 'network';
  confidence: number;
}

// ========================================
// YARA Rules
// ========================================

export interface YaraRule {
  id: string;
  name: string;
  description: string;
  author: string;
  reference?: string;
  version: string;
  tags: string[];
  malwareFamily?: string;
  ruleText: string;
  compiled?: Buffer;
  createdAt: Date;
  updatedAt: Date;
  metadata: Record<string, any>;
}

export interface YaraMatch {
  ruleId: string;
  ruleName: string;
  tags: string[];
  matchedStrings: MatchedString[];
  matchedAt: Date;
  confidence: number;
  severity: ThreatLevel;
}

export interface MatchedString {
  identifier: string;
  value: string;
  offset: number;
  length: number;
}

export interface YaraGenerationConfig {
  includeStrings: boolean;
  minStringLength: number;
  maxStrings: number;
  includeImports: boolean;
  includePEInfo: boolean;
  includeMetadata: boolean;
  familyName?: string;
  author?: string;
}

export interface GeneratedYaraRule extends YaraRule {
  basedOnSamples: string[];
  generatedAt: Date;
  quality: number;
  tested: boolean;
  falsePositiveRate?: number;
}

// ========================================
// Analysis Statistics
// ========================================

export interface AnalysisStatistics {
  totalSamples: number;
  analyzedSamples: number;
  pendingSamples: number;
  byMalwareType: Record<MalwareType, number>;
  byThreatLevel: Record<ThreatLevel, number>;
  byFileType: Record<FileType, number>;
  averageAnalysisTime: number;
  sandboxUtilization: number;
  recentActivity: {
    lastHour: number;
    lastDay: number;
    lastWeek: number;
  };
  topFamilies: Array<{
    family: string;
    count: number;
    lastSeen: Date;
  }>;
  performanceMetrics: {
    successRate: number;
    failureRate: number;
    timeoutRate: number;
  };
}
