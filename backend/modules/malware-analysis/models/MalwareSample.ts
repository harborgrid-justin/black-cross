import mongoose from 'mongoose';
import { v4 as uuidv4 } from 'uuid';

const MalwareSampleSchema = new mongoose.Schema({
  id: {
    type: String, default: uuidv4, unique: true, index: true,
  },
  file_name: { type: String, required: true },
  file_size: Number,
  file_type: String,
  hashes: {
    md5: { type: String, index: true },
    sha1: { type: String, index: true },
    sha256: { type: String, index: true, unique: true },
  },
  analysis_status: { type: String, enum: ['pending', 'analyzing', 'completed', 'failed'], default: 'pending' },
  malware_family: String,
  classification: [String],
  severity: { type: String, enum: ['low', 'medium', 'high', 'critical'] },
  static_analysis: {
    file_type: String,
    imports: [String],
    exports: [String],
    sections: [mongoose.Schema.Types.Mixed],
    strings: [String],
    packer: String,
  },
  dynamic_analysis: {
    network_traffic: [mongoose.Schema.Types.Mixed],
    file_modifications: [String],
    registry_modifications: [String],
    processes_created: [String],
    mutexes: [String],
    dropped_files: [String],
  },
  behavioral_analysis: {
    behaviors: [String],
    ttps: [String],
    mitre_techniques: [String],
  },
  extracted_iocs: {
    ips: [String],
    domains: [String],
    urls: [String],
    emails: [String],
    hashes: [String],
  },
  yara_matches: [String],
  sandbox_reports: [mongoose.Schema.Types.Mixed],
  submitted_by: String,
  submitted_at: Date,
  analyzed_at: Date,
  tags: [String],
  metadata: mongoose.Schema.Types.Mixed,
}, { timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' } });

MalwareSampleSchema.index({ malware_family: 1 });

export default mongoose.model('MalwareSample', MalwareSampleSchema);

